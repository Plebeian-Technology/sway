# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `warden-webauthn` gem.
# Please instead update this file by running `bin/tapioca gem warden-webauthn`.

# source://warden-webauthn//lib/warden/webauthn/version.rb#3
module Warden
  extend ::Warden::Test::WardenHelpers

  class << self
    # source://warden/1.2.9/lib/warden.rb#34
    def test_mode!; end
  end
end

# source://warden-webauthn//lib/warden/webauthn/version.rb#4
module Warden::WebAuthn; end

# Helper methods for generating & storing authentication challenges
#
# source://warden-webauthn//lib/warden/webauthn/authentication_initiation_helpers.rb#6
module Warden::WebAuthn::AuthenticationInitiationHelpers
  # source://warden-webauthn//lib/warden/webauthn/authentication_initiation_helpers.rb#17
  def authentication_challenge_key; end

  # source://warden-webauthn//lib/warden/webauthn/authentication_initiation_helpers.rb#7
  def generate_authentication_options(relying_party:, options: T.unsafe(nil)); end

  # source://warden-webauthn//lib/warden/webauthn/authentication_initiation_helpers.rb#13
  def store_challenge_in_session(options_for_authentication:); end
end

# Helper method for generating a symbol based on the WebAuthn::Error
#
# source://warden-webauthn//lib/warden/webauthn/error_key_finder.rb#6
class Warden::WebAuthn::ErrorKeyFinder
  class << self
    # source://warden-webauthn//lib/warden/webauthn/error_key_finder.rb#9
    def webauthn_error_key(exception:); end
  end
end

# Helpers that can be mixed in to any Rack middleware or application, in order
# to setup the environment for `Warden::WebAuthn`, such as the Relying Party
#
# source://warden-webauthn//lib/warden/webauthn/rack_helpers.rb#7
module Warden::WebAuthn::RackHelpers
  # source://warden-webauthn//lib/warden/webauthn/rack_helpers.rb#8
  def relying_party_key; end

  # source://warden-webauthn//lib/warden/webauthn/rack_helpers.rb#12
  def set_relying_party_in_request_env; end
end

# Helper methods to bootstrap registration challenges for implementors
#
# source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#6
module Warden::WebAuthn::RegistrationHelpers
  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#51
  def authenticator_selection_options; end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#31
  def delete_registration_challenge; end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#7
  def generate_registration_options(relying_party:, user_details:, exclude: T.unsafe(nil), options: T.unsafe(nil)); end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#35
  def parsed_credential; end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#39
  def raw_credential; end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#43
  def raw_credential_key; end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#27
  def registration_challenge; end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#47
  def registration_challenge_key; end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#15
  def store_challenge_in_session(options_for_registration:); end

  # source://warden-webauthn//lib/warden/webauthn/registration_helpers.rb#19
  def verify_registration(relying_party:); end
end

# The core strategy for WebAuthn authentication in Warden
#
# source://warden-webauthn//lib/warden/webauthn/strategy.rb#8
class Warden::WebAuthn::Strategy < ::Warden::Strategies::Base
  include ::Warden::WebAuthn::StrategyHelpers
  include ::Warden::WebAuthn::RackHelpers

  # source://warden-webauthn//lib/warden/webauthn/strategy.rb#20
  def authenticate!; end

  # @return [Boolean]
  #
  # source://warden-webauthn//lib/warden/webauthn/strategy.rb#12
  def valid?; end
end

# Helpers that can be mixed in to any WebAuthn-related code, such as custom strategies or
# an app's authentication flow
#
# source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#9
module Warden::WebAuthn::StrategyHelpers
  include ::Warden::WebAuthn::RackHelpers

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#45
  def authentication_challenge; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#71
  def authentication_challenge_key; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#41
  def credential_finder; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#75
  def credential_finder_key; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#49
  def delete_authentication_challenge; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#57
  def parsed_credential; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#53
  def raw_credential; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#79
  def raw_credential_key; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#37
  def relying_party; end

  # source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#14
  def verify_authentication_and_find_stored_credential; end
end

# source://warden-webauthn//lib/warden/webauthn/strategy_helpers.rb#11
class Warden::WebAuthn::StrategyHelpers::NoStoredCredentialFound < ::StandardError; end

# source://warden-webauthn//lib/warden/webauthn/version.rb#5
Warden::WebAuthn::VERSION = T.let(T.unsafe(nil), String)
