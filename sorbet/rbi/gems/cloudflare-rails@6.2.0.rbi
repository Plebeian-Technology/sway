# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cloudflare-rails` gem.
# Please instead update this file by running `bin/tapioca gem cloudflare-rails`.


# source://cloudflare-rails//lib/cloudflare_rails.rb#8
module CloudflareRails; end

# patch rack::request::helpers to use our cloudflare ips - this way request.ip is
# correct inside of rack and rails
#
# source://cloudflare-rails//lib/cloudflare_rails/check_trusted_proxies.rb#6
module CloudflareRails::CheckTrustedProxies
  # @return [Boolean]
  #
  # source://cloudflare-rails//lib/cloudflare_rails/check_trusted_proxies.rb#18
  def cloudflare?; end

  # @return [Boolean]
  #
  # source://cloudflare-rails//lib/cloudflare_rails/check_trusted_proxies.rb#7
  def cloudflare_ip?(ip); end

  # @return [Boolean]
  #
  # source://cloudflare-rails//lib/cloudflare_rails/check_trusted_proxies.rb#14
  def trusted_proxy?(ip); end
end

# source://cloudflare-rails//lib/cloudflare_rails/fallback_ips.rb#4
module CloudflareRails::FallbackIps; end

# convert our body into a list of IpAddrs
#
# source://cloudflare-rails//lib/cloudflare_rails/fallback_ips.rb#25
CloudflareRails::FallbackIps::IPS_V4 = T.let(T.unsafe(nil), Array)

# fetched from https://www.cloudflare.com/ips-v4/ on 2023-12-10
#
# source://cloudflare-rails//lib/cloudflare_rails/fallback_ips.rb#6
CloudflareRails::FallbackIps::IPS_V4_BODY = T.let(T.unsafe(nil), String)

# convert our body into a list of IpAddrs
#
# source://cloudflare-rails//lib/cloudflare_rails/fallback_ips.rb#39
CloudflareRails::FallbackIps::IPS_V6 = T.let(T.unsafe(nil), Array)

# from https://www.cloudflare.com/ips-v6/ on 2023-12-10
#
# source://cloudflare-rails//lib/cloudflare_rails/fallback_ips.rb#28
CloudflareRails::FallbackIps::IPS_V6_BODY = T.let(T.unsafe(nil), String)

# source://cloudflare-rails//lib/cloudflare_rails/importer.rb#7
class CloudflareRails::Importer
  class << self
    # source://cloudflare-rails//lib/cloudflare_rails/importer.rb#60
    def cloudflare_ips(refresh: T.unsafe(nil)); end

    # @raise [ResponseError]
    #
    # source://cloudflare-rails//lib/cloudflare_rails/importer.rb#37
    def fetch(url); end

    # source://cloudflare-rails//lib/cloudflare_rails/importer.rb#54
    def fetch_with_cache(type); end

    # source://cloudflare-rails//lib/cloudflare_rails/importer.rb#33
    def ips_v4; end

    # source://cloudflare-rails//lib/cloudflare_rails/importer.rb#29
    def ips_v6; end
  end
end

# source://cloudflare-rails//lib/cloudflare_rails/importer.rb#24
CloudflareRails::Importer::BASE_URL = T.let(T.unsafe(nil), String)

# source://cloudflare-rails//lib/cloudflare_rails/importer.rb#25
CloudflareRails::Importer::IPS_V4_URL = T.let(T.unsafe(nil), String)

# source://cloudflare-rails//lib/cloudflare_rails/importer.rb#26
CloudflareRails::Importer::IPS_V6_URL = T.let(T.unsafe(nil), String)

# Exceptions contain the Net::HTTP
# response object accessible via the {#response} method.
#
# source://cloudflare-rails//lib/cloudflare_rails/importer.rb#10
class CloudflareRails::Importer::ResponseError < ::StandardError
  # Instantiate an instance of ResponseError with a Net::HTTPResponse object
  #
  # @param [Net::HTTPResponse]
  # @return [ResponseError] a new instance of ResponseError
  #
  # source://cloudflare-rails//lib/cloudflare_rails/importer.rb#18
  def initialize(response); end

  # Returns the response of the last request
  # Net::HTTPOK
  #
  # @return [Net::HTTPResponse] A subclass of Net::HTTPResponse, e.g.
  #
  # source://cloudflare-rails//lib/cloudflare_rails/importer.rb#14
  def response; end
end

# source://cloudflare-rails//lib/cloudflare_rails/railtie.rb#6
class CloudflareRails::Railtie < ::Rails::Railtie; end

# setup defaults before we configure our app.
#
# source://cloudflare-rails//lib/cloudflare_rails/railtie.rb#8
CloudflareRails::Railtie::DEFAULTS = T.let(T.unsafe(nil), Hash)

# patch ActionDispatch::RemoteIP to use our cloudflare ips - this way
# request.remote_ip is correct inside of rails
#
# source://cloudflare-rails//lib/cloudflare_rails/remote_ip_proxies.rb#6
module CloudflareRails::RemoteIpProxies
  # source://cloudflare-rails//lib/cloudflare_rails/remote_ip_proxies.rb#7
  def proxies; end
end

# source://cloudflare-rails//lib/cloudflare_rails/version.rb#4
CloudflareRails::VERSION = T.let(T.unsafe(nil), String)
