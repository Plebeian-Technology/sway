# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree-haml` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree-haml`.


# source://syntax_tree-haml//lib/syntax_tree/haml.rb#57
class Haml::Parser::ParseNode < ::Struct
  # Here we're going to hook into the parse node and define a method that will
  # accept a visitor in order to walk through the tree.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#60
  def accept(visitor); end

  # This is our entrypoint for the formatter. We effectively delegate this to
  # accepting the Format visitor.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#87
  def format(q); end

  # When we're formatting a list of children, we need to know the last line a
  # node is on. This is because the next node in the list of children should be
  # at most 1 blank line below the last line of the previous node. We cache this
  # because at worst it requires walking the entire tree because filter nodes
  # can take up multiple lines.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#96
  def last_line; end

  # This is our entrypoint for the pretty printer. We effectively delegate this
  # to accepting the PrettyPrint visitor.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#109
  def pretty_print(q); end
end

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#7
module SyntaxTree; end

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#8
module SyntaxTree::Haml
  class << self
    # This is the main entrypoint for the formatter. It parses the source,
    # builds a formatter, then pretty prints the result.
    #
    # source://syntax_tree-haml//lib/syntax_tree/haml.rb#36
    def format(source, maxwidth = T.unsafe(nil), options: T.unsafe(nil)); end

    # This is the main parser entrypoint, and just delegates to the Haml gem's
    # parser to do the heavy lifting.
    #
    # source://syntax_tree-haml//lib/syntax_tree/haml.rb#30
    def parse(source); end

    # This is a required API for syntax tree which just delegates to File.read.
    #
    # source://syntax_tree-haml//lib/syntax_tree/haml.rb#45
    def read(filepath); end
  end
end

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#9
SyntaxTree::Haml::DOCTYPE_TYPES = T.let(T.unsafe(nil), Hash)

# source://syntax_tree-haml//lib/syntax_tree/haml.rb#18
SyntaxTree::Haml::DOCTYPE_VERSIONS = T.let(T.unsafe(nil), Array)

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#5
class SyntaxTree::Haml::Format < ::SyntaxTree::Haml::Visitor
  # @return [Format] a new instance of Format
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#28
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#26
  def q; end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#html-comments-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#33
  def visit_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#doctype-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#47
  def visit_doctype(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#filter
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#63
  def visit_filter(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#haml-comments--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#88
  def visit_haml_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#plain-text
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#113
  def visit_plain(node); end

  # Visit the root node of the AST.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#124
  def visit_root(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#inserting_ruby
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#137
  def visit_script(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#running-ruby--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#151
  def visit_silent_script(node); end

  # Visit a tag node.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#314
  def visit_tag(node); end

  private

  # When printing out sequences of silent scripts, sometimes subsequent nodes
  # will be continuations of previous nodes. In that case we want to dedent
  # them to match.
  #
  # @return [Boolean]
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#430
  def continuation?(node, child); end

  # If a node comes in as the plain type but starts with one of the special
  # characters that haml parses, then we need to escape it with a \ when
  # printing.
  #
  # @return [Boolean]
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#446
  def escaped?(text); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#497
  def format(node, column = T.unsafe(nil)); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#402
  def format_tag_value(q, value); end

  # Take a source string and attempt to parse it into a set of attributes
  # that can be used to format the source.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#454
  def parse_attributes(source); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#469
  def parse_attributes_hash(source, node, level = T.unsafe(nil)); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#501
  def with_children(node); end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#6
class SyntaxTree::Haml::Format::Formatter < ::SyntaxTree::Formatter
  # @return [Formatter] a new instance of Formatter
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#9
  def initialize(source, *rest, options: T.unsafe(nil)); end

  # Returns the value of attribute literal_lines.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#7
  def literal_lines; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#226
class SyntaxTree::Haml::Format::HTMLAttributesPart
  # @return [HTMLAttributesPart] a new instance of HTMLAttributesPart
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#237
  def initialize(raw); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#244
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#256
  def length; end

  # Returns the value of attribute values.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#235
  def values; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#233
SyntaxTree::Haml::Format::HTMLAttributesPart::SEPARATOR = T.let(T.unsafe(nil), SyntaxTree::Haml::Format::HTMLAttributesPart::Separator)

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#227
class SyntaxTree::Haml::Format::HTMLAttributesPart::Separator
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#228
  def call(q); end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#261
class SyntaxTree::Haml::Format::HashAttributesPart < ::Struct
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#262
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#266
  def length; end

  private

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#274
  def format_value(q, hash, level = T.unsafe(nil)); end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
class SyntaxTree::Haml::Format::LiteralHashValue < ::Struct
  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
  def value=(_); end

  class << self
    # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
    def [](*_arg0); end

    # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
    def inspect; end

    # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
    def keyword_init?; end

    # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
    def members; end

    # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#170
    def new(*_arg0); end
  end
end

# When formatting a tag, there are a lot of different kinds of things that
# can be printed out. There's the tag name, the attributes, the content,
# etc. This object is responsible for housing all of those parts.
#
# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#175
class SyntaxTree::Haml::Format::PartList
  # @return [PartList] a new instance of PartList
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#178
  def initialize(node); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#183
  def <<(part); end

  # @return [Boolean]
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#187
  def empty?; end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#191
  def format(q); end

  # Returns the value of attribute node.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#176
  def node; end

  # Returns the value of attribute parts.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#176
  def parts; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#206
class SyntaxTree::Haml::Format::PlainPart < ::Struct
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#207
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#211
  def length; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#216
class SyntaxTree::Haml::Format::PrefixPart < ::Struct
  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#217
  def format(q, align); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/format.rb#221
  def length; end
end

# source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#5
class SyntaxTree::Haml::PrettyPrint < ::SyntaxTree::Haml::Visitor
  # @return [PrettyPrint] a new instance of PrettyPrint
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#6
  def q; end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#html-comments-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#13
  def visit_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#doctype-
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#27
  def visit_doctype(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#filter
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#42
  def visit_filter(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#haml-comments--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#50
  def visit_haml_comment(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#plain-text
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#55
  def visit_plain(node); end

  # Visit the root node of the AST.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#60
  def visit_root(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#inserting_ruby
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#67
  def visit_script(node); end

  # https://haml.info/docs/yardoc/file.REFERENCE.html#running-ruby--
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#77
  def visit_silent_script(node); end

  # Visit a tag node.
  #
  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#85
  def visit_tag(node); end

  private

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#127
  def bool_field(name); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#132
  def group(name); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#143
  def pp_field(name, value); end

  # source://syntax_tree-haml//lib/syntax_tree/haml/pretty_print.rb#150
  def text_field(name, value); end
end

# This is the parent class of the various visitors that we provide to access
# the HAML syntax tree.
#
# source://syntax_tree-haml//lib/syntax_tree/haml.rb#22
class SyntaxTree::Haml::Visitor
  # source://syntax_tree-haml//lib/syntax_tree/haml.rb#23
  def visit(node); end
end
