# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `syntax_tree-rbs` gem.
# Please instead update this file by running `bin/tapioca gem syntax_tree-rbs`.


# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#36
module RBS; end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#45
module RBS::AST; end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#46
module RBS::AST::Declarations; end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#47
class RBS::AST::Declarations::Base
  include ::SyntaxTree::RBS::Entrypoints
end

# class Foo end
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#52
class RBS::AST::Declarations::Class < ::RBS::AST::Declarations::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#53
  def accept(visitor); end
end

# Foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#59
class RBS::AST::Declarations::Constant < ::RBS::AST::Declarations::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#60
  def accept(visitor); end
end

# $foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#66
class RBS::AST::Declarations::Global < ::RBS::AST::Declarations::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#67
  def accept(visitor); end
end

# interface _Foo end
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#73
class RBS::AST::Declarations::Interface < ::RBS::AST::Declarations::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#74
  def accept(visitor); end
end

# module Foo end
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#80
class RBS::AST::Declarations::Module < ::RBS::AST::Declarations::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#81
  def accept(visitor); end
end

# type foo = String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#87
class RBS::AST::Declarations::TypeAlias < ::RBS::AST::Declarations::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#88
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#94
module RBS::AST::Members; end

# alias foo bar
# alias self.foo self.bar
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#101
class RBS::AST::Members::Alias < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#102
  def accept(visitor); end
end

# attr_accessor foo: Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#108
class RBS::AST::Members::AttrAccessor < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#109
  def accept(visitor); end
end

# attr_reader foo: Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#115
class RBS::AST::Members::AttrReader < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#116
  def accept(visitor); end
end

# attr_writer foo: Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#122
class RBS::AST::Members::AttrWriter < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#123
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#95
class RBS::AST::Members::Base
  include ::SyntaxTree::RBS::Entrypoints
end

# self.@foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#129
class RBS::AST::Members::ClassInstanceVariable < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#130
  def accept(visitor); end
end

# @@foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#136
class RBS::AST::Members::ClassVariable < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#137
  def accept(visitor); end
end

# extend Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#143
class RBS::AST::Members::Extend < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#144
  def accept(visitor); end
end

# include Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#150
class RBS::AST::Members::Include < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#151
  def accept(visitor); end
end

# @foo: String
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#157
class RBS::AST::Members::InstanceVariable < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#158
  def accept(visitor); end
end

# def t: (T t) -> void
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#164
class RBS::AST::Members::MethodDefinition < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#165
  def accept(visitor); end
end

# prepend Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#171
class RBS::AST::Members::Prepend < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#172
  def accept(visitor); end
end

# private
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#178
class RBS::AST::Members::Private < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#179
  def accept(visitor); end
end

# public
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#185
class RBS::AST::Members::Public < ::RBS::AST::Members::Base
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#186
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#37
class RBS::TypeName
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#40
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#193
module RBS::Types; end

# Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#195
class RBS::Types::Alias
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#198
  def accept(visitor); end
end

module RBS::Types::Bases; end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#204
class RBS::Types::Bases::Any < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#207
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#213
class RBS::Types::Bases::Bool < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#216
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#222
class RBS::Types::Bases::Bottom < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#225
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#231
class RBS::Types::Bases::Class < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#234
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#240
class RBS::Types::Bases::Instance < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#243
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#249
class RBS::Types::Bases::Nil < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#252
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#258
class RBS::Types::Bases::Self < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#261
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#267
class RBS::Types::Bases::Top < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#270
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#276
class RBS::Types::Bases::Void < ::RBS::Types::Bases::Base
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#279
  def accept(visitor); end
end

# Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#285
class RBS::Types::ClassInstance
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#288
  def accept(visitor); end
end

# singleton(Foo)
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#294
class RBS::Types::ClassSingleton
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#297
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#303
class RBS::Types::Function::Param
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#306
  def accept(visitor); end
end

# _Foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#312
class RBS::Types::Interface
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#315
  def accept(visitor); end
end

# foo & bar
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#321
class RBS::Types::Intersection
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#324
  def accept(visitor); end
end

# 1
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#330
class RBS::Types::Literal
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#333
  def accept(visitor); end
end

# foo?
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#339
class RBS::Types::Optional
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#342
  def accept(visitor); end
end

# ^-> void
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#348
class RBS::Types::Proc
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#351
  def accept(visitor); end
end

# { foo: bar }
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#357
class RBS::Types::Record
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#360
  def accept(visitor); end
end

# [foo, bar]
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#366
class RBS::Types::Tuple
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#369
  def accept(visitor); end
end

# foo | bar
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#375
class RBS::Types::Union
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#378
  def accept(visitor); end
end

# foo
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#384
class RBS::Types::Variable
  include ::SyntaxTree::RBS::Entrypoints

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#387
  def accept(visitor); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#7
module SyntaxTree; end

# source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#8
module SyntaxTree::RBS
  class << self
    # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#44
    def format(source, maxwidth = T.unsafe(nil)); end

    # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#52
    def parse(source); end

    # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#57
    def read(filepath); end
  end
end

# These are the methods that are going to be defined on each node of the
# AST. They each will create a visitor and enter into the visitor's walking
# algorithm.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#8
module SyntaxTree::RBS::Entrypoints
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#9
  def format(q); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#13
  def pretty_print(q); end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#5
class SyntaxTree::RBS::Format < ::SyntaxTree::RBS::Visitor
  # @return [Format] a new instance of Format
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#6
  def q; end

  # Visit a RBS::AST::Members::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#17
  def visit_alias(node); end

  # Visit a RBS::Types::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#35
  def visit_alias_type(node); end

  # Visit a RBS::Types::Bases::Any node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#40
  def visit_any_type(node); end

  # Visit a RBS::AST::Members::AttrAccessor node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#43
  def visit_attr_accessor_member(node); end

  # Visit a RBS::AST::Members::AttrReader node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#50
  def visit_attr_reader_member(node); end

  # Visit a RBS::AST::Members::AttrWriter node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#57
  def visit_attr_writer_member(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#12
  def visit_base_type(node); end

  # Visit a RBS::Types::Bases::Bool node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#64
  def visit_bool_type(node); end

  # Visit a RBS::Types::Bases::Bottom node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#67
  def visit_bottom_type(node); end

  # Visit a RBS::AST::Declarations::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#70
  def visit_class_declaration(node); end

  # Visit a RBS::Types::ClassInstance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#90
  def visit_class_instance_type(node); end

  # Visit a RBS::AST::Members::ClassInstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#95
  def visit_class_instance_variable_member(node); end

  # Visit a RBS::Types::ClassSingleton node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#107
  def visit_class_singleton_type(node); end

  # Visit a RBS::Types::Bases::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#114
  def visit_class_type(node); end

  # Visit a RBS::AST::Members::ClassVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#117
  def visit_class_variable_member(node); end

  # Visit a RBS::AST::Declarations::Constant node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#128
  def visit_constant_declaration(node); end

  # Visit a RBS::AST::Members::Extend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#139
  def visit_extend_member(node); end

  # Visit a RBS::Types::Function::Param node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#150
  def visit_function_param_type(node); end

  # Visit a RBS::AST::Declarations::Global node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#165
  def visit_global_declaration(node); end

  # Visit a RBS::AST::Members::Include node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#176
  def visit_include_member(node); end

  # Visit a RBS::Types::Bases::Instance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#187
  def visit_instance_type(node); end

  # Visit a RBS::AST::Members::InstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#190
  def visit_instance_variable_member(node); end

  # Visit a RBS::AST::Declarations::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#201
  def visit_interface_declaration(node); end

  # Visit a RBS::Types::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#215
  def visit_interface_type(node); end

  # Visit a RBS::Types::Intersection node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#220
  def visit_intersection_type(node); end

  # Visit a RBS::Types::Literal node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#237
  def visit_literal_type(node); end

  # Visit a RBS::AST::Members::MethodDefinition node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#259
  def visit_method_definition_member(node); end

  # Visit a RBS::AST::Declarations::Module node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#312
  def visit_module_declaration(node); end

  # Visit a RBS::Types::Bases::Nil node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#334
  def visit_nil_type(node); end

  # Visit a RBS::Types::Optional node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#337
  def visit_optional_type(node); end

  # Visit a RBS::AST::Members::Prepend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#343
  def visit_prepend_member(node); end

  # Visit a RBS::AST::Members::Private node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#354
  def visit_private_member(node); end

  # Visit a RBS::Types::Proc node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#359
  def visit_proc_type(node); end

  # Visit a RBS::AST::Members::Public node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#369
  def visit_public_member(node); end

  # Visit a RBS::Types::Record node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#374
  def visit_record_type(node); end

  # Visit a SyntaxTree::RBS::Root node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#401
  def visit_root(node); end

  # Visit a RBS::Types::Self node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#416
  def visit_self_type(node); end

  # Visit a RBS::Types::Top node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#419
  def visit_top_type(node); end

  # Visit a RBS::Types::Tuple node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#422
  def visit_tuple_type(node); end

  # Visit a RBS::AST::Declarations::TypeAlias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#438
  def visit_type_alias(node); end

  # Visit a RBS::TypeName node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#456
  def visit_type_name(node); end

  # Visit a RBS::Types::Union node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#461
  def visit_union_type(node); end

  # Visit a RBS::Types::Variable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#474
  def visit_variable_type(node); end

  # Visit a RBS::Types::Bases::Void node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#479
  def visit_void_type(node); end

  private

  # An annotation can be attached to many kinds of nodes, and should be
  # printed using %a{}.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#485
  def print_annotations(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#503
  def print_attribute(type, node); end

  # Comments come in as one whole string, so here we split it up into
  # multiple lines and then prefix it with the pound sign.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#525
  def print_comment(node); end

  # Nodes which have members will all flow their printing through this
  # class, which keeps track of
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#538
  def print_members(node); end

  # (T t) -> void
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#554
  def print_method_overload(node); end

  # (T t) -> void
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#559
  def print_method_signature(node); end

  # Certain nodes are names with optional arguments attached, as in
  # Array[A]. We handle all of that printing centralized here.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#658
  def print_name_and_args(node); end

  # Prints out the name of a class, interface, or module declaration.
  # Additionally loops through each type parameter if there are any and
  # print them out joined by commas. Checks for validation and variance.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/format.rb#673
  def print_name_and_type_params(node); end
end

# A slight extension to the default PrettierPrint formatter that keeps track
# of the source (so that it can be referenced by annotations if they need
# it) and keeps track of the level of intersections and unions so that
# parentheses can be forced if necessary.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#21
class SyntaxTree::RBS::Formatter < ::PrettierPrint
  # @return [Formatter] a new instance of Formatter
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#24
  def initialize(source, *rest); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#30
  def force_parens; end

  # @return [Boolean]
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#38
  def force_parens?; end

  # Returns the value of attribute source.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#22
  def source; end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#5
class SyntaxTree::RBS::PrettyPrint < ::SyntaxTree::RBS::Visitor
  # @return [PrettyPrint] a new instance of PrettyPrint
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#8
  def initialize(q); end

  # Returns the value of attribute q.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#6
  def q; end

  # Visit a RBS::AST::Members::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#17
  def visit_alias(node); end

  # Visit a RBS::Types::Alias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#28
  def visit_alias_type(node); end

  # Visit a RBS::Types::Bases::Any node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#33
  def visit_any_type(node); end

  # Visit a RBS::AST::Members::AttrAccessor node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#36
  def visit_attr_accessor_member(node); end

  # Visit a RBS::AST::Members::AttrReader node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#45
  def visit_attr_reader_member(node); end

  # Visit a RBS::AST::Members::AttrWriter node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#54
  def visit_attr_writer_member(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#12
  def visit_base_type(node); end

  # Visit a RBS::Types::Bases::Bool node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#63
  def visit_bool_type(node); end

  # Visit a RBS::Types::Bases::Bottom node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#66
  def visit_bottom_type(node); end

  # Visit a RBS::AST::Declarations::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#69
  def visit_class_declaration(node); end

  # Visit a RBS::Types::ClassInstance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#86
  def visit_class_instance_type(node); end

  # Visit a RBS::AST::Members::ClassInstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#91
  def visit_class_instance_variable_member(node); end

  # Visit a RBS::Types::ClassSingleton node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#99
  def visit_class_singleton_type(node); end

  # Visit a RBS::Types::Bases::Class node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#104
  def visit_class_type(node); end

  # Visit a RBS::AST::Members::ClassVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#107
  def visit_class_variable_member(node); end

  # Visit a RBS::AST::Declarations::Constant node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#115
  def visit_constant_declaration(node); end

  # Visit a RBS::AST::Members::Extend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#124
  def visit_extend_member(node); end

  # Visit a RBS::Types::Function::Param node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#133
  def visit_function_param_type(node); end

  # Visit a RBS::AST::Declarations::Global node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#141
  def visit_global_declaration(node); end

  # Visit a RBS::AST::Members::Include node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#150
  def visit_include_member(node); end

  # Visit a RBS::Types::Bases::Instance node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#159
  def visit_instance_type(node); end

  # Visit a RBS::AST::Members::InstanceVariable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#162
  def visit_instance_variable_member(node); end

  # Visit a RBS::AST::Declarations::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#170
  def visit_interface_declaration(node); end

  # Visit a RBS::Types::Interface node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#180
  def visit_interface_type(node); end

  # Visit a RBS::Types::Intersection node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#185
  def visit_intersection_type(node); end

  # Visit a RBS::Types::Literal node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#190
  def visit_literal_type(node); end

  # Visit a RBS::AST::Members::MethodDefinition node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#195
  def visit_method_definition_member(node); end

  # Visit a RBS::AST::Declarations::Module node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#215
  def visit_module_declaration(node); end

  # Visit a RBS::Types::Bases::Nil node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#236
  def visit_nil_type(node); end

  # Visit a RBS::Types::Optional node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#239
  def visit_optional_type(node); end

  # Visit a RBS::AST::Members::Prepend node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#244
  def visit_prepend_member(node); end

  # Visit a RBS::AST::Members::Private node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#253
  def visit_private_member(node); end

  # Visit a RBS::Types::Proc node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#258
  def visit_proc_type(node); end

  # Visit a RBS::AST::Members::Public node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#263
  def visit_public_member(node); end

  # Visit a RBS::Types::Record node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#268
  def visit_record_type(node); end

  # Visit a SyntaxTree::RBS::Root node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#273
  def visit_root(node); end

  # Visit a RBS::Types::Self node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#278
  def visit_self_type(node); end

  # Visit a RBS::Types::Top node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#281
  def visit_top_type(node); end

  # Visit a RBS::Types::Tuple node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#284
  def visit_tuple_type(node); end

  # Visit a RBS::AST::Declarations::TypeAlias node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#289
  def visit_type_alias(node); end

  # Visit a RBS::TypeName node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#299
  def visit_type_name(node); end

  # Visit a RBS::Types::Union node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#307
  def visit_union_type(node); end

  # Visit a RBS::Types::Variable node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#312
  def visit_variable_type(node); end

  # Visit a RBS::Types::Bases::Void node.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#317
  def visit_void_type(node); end

  private

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#335
  def bool_field(name); end

  # -------------------------------------------------------------------------
  # Printing structure
  # -------------------------------------------------------------------------
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#325
  def group(name); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#340
  def pp_field(name, field); end

  # -------------------------------------------------------------------------
  # Printing certain kinds of nodes
  # -------------------------------------------------------------------------
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#356
  def print_annotations(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#370
  def print_attribute(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#397
  def print_comment(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#409
  def print_method_overload(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#413
  def print_method_signature(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#491
  def print_name_and_args(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#501
  def print_name_and_type_params(node); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/pretty_print.rb#346
  def visit_field(name, field); end
end

# This is the root node of the entire tree. It contains all of the top-level
# declarations within the file.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#20
class SyntaxTree::RBS::Root
  include ::SyntaxTree::RBS::Entrypoints

  # @return [Root] a new instance of Root
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#25
  def initialize(declarations); end

  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#29
  def accept(visitor); end

  # Returns the value of attribute declarations.
  #
  # source://syntax_tree-rbs//lib/syntax_tree/rbs/entrypoints.rb#23
  def declarations; end
end

# source://syntax_tree-rbs//lib/syntax_tree/rbs/version.rb#5
SyntaxTree::RBS::VERSION = T.let(T.unsafe(nil), String)

# This is the parent class of any of the visitors that we define in this
# module. It is used to walk through the tree.
#
# source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#11
class SyntaxTree::RBS::Visitor
  # source://syntax_tree-rbs//lib/syntax_tree/rbs.rb#12
  def visit(node); end
end
