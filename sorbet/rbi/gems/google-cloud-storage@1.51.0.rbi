# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-storage` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-storage`.


# source://google-cloud-storage//lib/google-cloud-storage.rb#26
module Google; end

# source://google-cloud-storage//lib/google-cloud-storage.rb#27
module Google::Cloud
  # Creates a new object for connecting to the Storage service.
  # Each call creates a new connection.
  #
  # For more information on connecting to Google Cloud see the
  # {file:AUTHENTICATION.md Authentication Guide}.
  #
  # @example
  #   require "google/cloud"
  #
  #   gcloud  = Google::Cloud.new
  #   storage = gcloud.storage
  #   bucket = storage.bucket "my-bucket"
  #   file = bucket.file "path/to/my-file.ext"
  # @example The default scope can be overridden with the `scope` option:
  #   require "google/cloud"
  #
  #   gcloud  = Google::Cloud.new
  #   readonly_scope = "https://www.googleapis.com/auth/devstorage.read_only"
  #   readonly_storage = gcloud.storage scope: readonly_scope
  # @param retries [Integer] Number of times to retry requests on server
  #   error. The default value is `3`. Optional.
  # @param max_elapsed_time [Integer] Total time in seconds that requests are allowed to keep being retried.
  # @param base_interval [Float] The initial interval in seconds between tries.
  # @param max_interval [Integer] The maximum interval in seconds that any individual retry can reach.
  # @param timeout [Integer] (default timeout) The max duration, in seconds, to wait before timing out. Optional.
  #   If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol.
  # @param open_timeout [Integer] How long, in seconds, before failed connections time out. Optional.
  # @param read_timeout [Integer] How long, in seconds, before requests time out. Optional.
  # @param send_timeout [Integer] How long, in seconds, before receiving response from server times out. Optional.
  # @param upload_chunk_size [Integer] The chunk size of storage upload, in bytes.
  #   The default value is 100 MB, i.e. 104_857_600 bytes. To disable chunking and upload
  #   the complete file regardless of size, pass 0 as the chunk size.
  # @param multiplier [Integer] Each successive interval grows by this factor. A multipler of 1.5 means the next
  #   interval will be 1.5x the current interval.
  # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
  #   set of resources and operations that the connection can access. See
  #   [Using OAuth 2.0 to Access Google
  #   APIs](https://developers.google.com/identity/protocols/OAuth2).
  #
  #   The default scope is:
  #
  #   * `https://www.googleapis.com/auth/devstorage.full_control`
  # @return [Google::Cloud::Storage::Project]
  # @see https://cloud.google.com/storage/docs/authentication#oauth Storage
  #   OAuth 2.0 Authentication
  #
  # source://google-cloud-storage//lib/google-cloud-storage.rb#79
  def storage(scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil), upload_chunk_size: T.unsafe(nil)); end

  class << self
    # source://google-cloud-core/1.7.0/lib/google/cloud.rb#158
    def auto_load_files; end

    # source://google-cloud-core/1.7.0/lib/google/cloud.rb#128
    def auto_load_gems; end

    # source://google-cloud-core/1.7.0/lib/google/cloud.rb#91
    def configure; end

    # source://google-cloud-env/2.1.1/lib/google/cloud/env.rb#517
    def env; end

    # source://google-cloud-core/1.7.0/lib/google/cloud.rb#103
    def init_configuration; end

    # source://google-cloud-core/1.7.0/lib/google/cloud.rb#142
    def loaded_files; end

    # source://google-cloud-core/1.7.0/lib/google/cloud.rb#62
    def new(project_id = T.unsafe(nil), credentials = T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil)); end

    # Creates a new object for connecting to the Storage service.
    # Each call creates a new connection.
    #
    # For more information on connecting to Google Cloud see the
    # {file:AUTHENTICATION.md Authentication Guide}.
    #
    # @example
    #   require "google/cloud/storage"
    #
    #   storage = Google::Cloud.storage "my-project",
    #   "/path/to/keyfile.json"
    #
    #   bucket = storage.bucket "my-bucket"
    #   file = bucket.file "path/to/my-file.ext"
    # @param project_id [String] Project identifier for the Storage service
    #   you are connecting to. If not present, the default project for the
    #   credentials is used.
    # @param credentials [String, Hash, Google::Auth::Credentials] The path to
    #   the keyfile as a String, the contents of the keyfile as a Hash, or a
    #   Google::Auth::Credentials object. (See {Storage::Credentials})
    # @param scope [String, Array<String>] The OAuth 2.0 scopes controlling the
    #   set of resources and operations that the connection can access. See
    #   [Using OAuth 2.0 to Access Google
    #   APIs](https://developers.google.com/identity/protocols/OAuth2).
    #
    #   The default scope is:
    #
    #   * `https://www.googleapis.com/auth/devstorage.full_control`
    # @param retries [Integer] Number of times to retry requests on server
    #   error. The default value is `3`. Optional.
    # @param max_elapsed_time [Integer] Total time in seconds that requests are allowed to keep being retried.
    # @param base_interval [Float] The initial interval in seconds between tries.
    # @param multiplier [Integer] Each successive interval grows by this factor. A multipler of 1.5 means the next
    #   interval will be 1.5x the current interval.
    # @param timeout [Integer] (default timeout) The max duration, in seconds, to wait before timing out. Optional.
    #   If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol.
    # @param open_timeout [Integer] How long, in seconds, before failed connections time out. Optional.
    # @param read_timeout [Integer] How long, in seconds, before requests time out. Optional.
    # @param send_timeout [Integer] How long, in seconds, before receiving response from server times out. Optional.
    # @param upload_chunk_size [Integer] The chunk size of storage upload, in bytes.
    #   The default value is 100 MB, i.e. 104_857_600 bytes. To disable chunking and upload
    #   the complete file regardless of size, pass 0 as the chunk size.
    # @param max_interval [Integer] The maximum interval in seconds that any individual retry can reach.
    # @return [Google::Cloud::Storage::Project]
    #
    # source://google-cloud-storage//lib/google-cloud-storage.rb#142
    def storage(project_id = T.unsafe(nil), credentials = T.unsafe(nil), scope: T.unsafe(nil), retries: T.unsafe(nil), timeout: T.unsafe(nil), open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil), send_timeout: T.unsafe(nil), max_elapsed_time: T.unsafe(nil), base_interval: T.unsafe(nil), max_interval: T.unsafe(nil), multiplier: T.unsafe(nil), upload_chunk_size: T.unsafe(nil)); end
  end
end
