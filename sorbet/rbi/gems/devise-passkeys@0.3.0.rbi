# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `devise-passkeys` gem.
# Please instead update this file by running `bin/tapioca gem devise-passkeys`.

# source://devise-passkeys//lib/devise/passkeys/model.rb#3
module Devise
  # source://devise/4.9.4/lib/devise.rb#138
  def allow_unconfirmed_access_for; end

  # source://devise/4.9.4/lib/devise.rb#138
  def allow_unconfirmed_access_for=(val); end

  # source://devise/4.9.4/lib/devise.rb#83
  def authentication_keys; end

  # source://devise/4.9.4/lib/devise.rb#83
  def authentication_keys=(val); end

  # source://devise/4.9.4/lib/devise.rb#91
  def case_insensitive_keys; end

  # source://devise/4.9.4/lib/devise.rb#91
  def case_insensitive_keys=(val); end

  # source://devise/4.9.4/lib/devise.rb#265
  def clean_up_csrf_token_on_authentication; end

  # source://devise/4.9.4/lib/devise.rb#265
  def clean_up_csrf_token_on_authentication=(val); end

  # source://devise/4.9.4/lib/devise.rb#142
  def confirm_within; end

  # source://devise/4.9.4/lib/devise.rb#142
  def confirm_within=(val); end

  # source://devise/4.9.4/lib/devise.rb#146
  def confirmation_keys; end

  # source://devise/4.9.4/lib/devise.rb#146
  def confirmation_keys=(val); end

  # source://devise/4.9.4/lib/devise.rb#209
  def default_scope; end

  # source://devise/4.9.4/lib/devise.rb#209
  def default_scope=(val); end

  # source://devise/4.9.4/lib/devise.rb#117
  def email_regexp; end

  # source://devise/4.9.4/lib/devise.rb#117
  def email_regexp=(val); end

  # source://devise/4.9.4/lib/devise.rb#133
  def expire_all_remember_me_on_sign_out; end

  # source://devise/4.9.4/lib/devise.rb#133
  def expire_all_remember_me_on_sign_out=(val); end

  # source://devise/4.9.4/lib/devise.rb#129
  def extend_remember_period; end

  # source://devise/4.9.4/lib/devise.rb#129
  def extend_remember_period=(val); end

  # source://devise/4.9.4/lib/devise.rb#286
  def helpers; end

  # source://devise/4.9.4/lib/devise.rb#99
  def http_authenticatable; end

  # source://devise/4.9.4/lib/devise.rb#99
  def http_authenticatable=(val); end

  # source://devise/4.9.4/lib/devise.rb#103
  def http_authenticatable_on_xhr; end

  # source://devise/4.9.4/lib/devise.rb#103
  def http_authenticatable_on_xhr=(val); end

  # source://devise/4.9.4/lib/devise.rb#79
  def http_authentication_key; end

  # source://devise/4.9.4/lib/devise.rb#79
  def http_authentication_key=(val); end

  # source://devise/4.9.4/lib/devise.rb#111
  def http_authentication_realm; end

  # source://devise/4.9.4/lib/devise.rb#111
  def http_authentication_realm=(val); end

  # source://devise/4.9.4/lib/devise.rb#300
  def last_attempt_warning; end

  # source://devise/4.9.4/lib/devise.rb#300
  def last_attempt_warning=(val); end

  # source://devise/4.9.4/lib/devise.rb#176
  def lock_strategy; end

  # source://devise/4.9.4/lib/devise.rb#176
  def lock_strategy=(val); end

  # source://devise/4.9.4/lib/devise.rb#213
  def mailer_sender; end

  # source://devise/4.9.4/lib/devise.rb#213
  def mailer_sender=(val); end

  # source://devise/4.9.4/lib/devise.rb#278
  def mappings; end

  # source://devise/4.9.4/lib/devise.rb#189
  def maximum_attempts; end

  # source://devise/4.9.4/lib/devise.rb#189
  def maximum_attempts=(val); end

  # source://devise/4.9.4/lib/devise.rb#221
  def navigational_formats; end

  # source://devise/4.9.4/lib/devise.rb#221
  def navigational_formats=(val); end

  # source://devise/4.9.4/lib/devise.rb#282
  def omniauth_configs; end

  # source://devise/4.9.4/lib/devise.rb#261
  def omniauth_path_prefix; end

  # source://devise/4.9.4/lib/devise.rb#261
  def omniauth_path_prefix=(val); end

  # source://devise/4.9.4/lib/devise.rb#107
  def params_authenticatable; end

  # source://devise/4.9.4/lib/devise.rb#107
  def params_authenticatable=(val); end

  # source://devise/4.9.4/lib/devise.rb#296
  def paranoid; end

  # source://devise/4.9.4/lib/devise.rb#296
  def paranoid=(val); end

  # source://devise/4.9.4/lib/devise.rb#244
  def parent_controller; end

  # source://devise/4.9.4/lib/devise.rb#244
  def parent_controller=(val); end

  # source://devise/4.9.4/lib/devise.rb#250
  def parent_mailer; end

  # source://devise/4.9.4/lib/devise.rb#250
  def parent_mailer=(val); end

  # source://devise/4.9.4/lib/devise.rb#121
  def password_length; end

  # source://devise/4.9.4/lib/devise.rb#121
  def password_length=(val); end

  # source://devise/4.9.4/lib/devise.rb#158
  def pepper; end

  # source://devise/4.9.4/lib/devise.rb#158
  def pepper=(val); end

  # source://devise/4.9.4/lib/devise.rb#150
  def reconfirmable; end

  # source://devise/4.9.4/lib/devise.rb#150
  def reconfirmable=(val); end

  # source://devise/4.9.4/lib/devise.rb#272
  def reload_routes; end

  # source://devise/4.9.4/lib/devise.rb#272
  def reload_routes=(val); end

  # source://devise/4.9.4/lib/devise.rb#125
  def remember_for; end

  # source://devise/4.9.4/lib/devise.rb#125
  def remember_for=(val); end

  # source://devise/4.9.4/lib/devise.rb#71
  def rememberable_options; end

  # source://devise/4.9.4/lib/devise.rb#71
  def rememberable_options=(val); end

  # source://devise/4.9.4/lib/devise.rb#87
  def request_keys; end

  # source://devise/4.9.4/lib/devise.rb#87
  def request_keys=(val); end

  # source://devise/4.9.4/lib/devise.rb#197
  def reset_password_keys; end

  # source://devise/4.9.4/lib/devise.rb#197
  def reset_password_keys=(val); end

  # source://devise/4.9.4/lib/devise.rb#201
  def reset_password_within; end

  # source://devise/4.9.4/lib/devise.rb#201
  def reset_password_within=(val); end

  # source://devise/4.9.4/lib/devise.rb#230
  def responder; end

  # source://devise/4.9.4/lib/devise.rb#230
  def responder=(val); end

  # source://devise/4.9.4/lib/devise.rb#256
  def router_name; end

  # source://devise/4.9.4/lib/devise.rb#256
  def router_name=(val); end

  # source://devise/4.9.4/lib/devise.rb#171
  def scoped_views; end

  # source://devise/4.9.4/lib/devise.rb#171
  def scoped_views=(val); end

  # source://devise/4.9.4/lib/devise.rb#67
  def secret_key; end

  # source://devise/4.9.4/lib/devise.rb#67
  def secret_key=(val); end

  # source://devise/4.9.4/lib/devise.rb#162
  def send_email_changed_notification; end

  # source://devise/4.9.4/lib/devise.rb#162
  def send_email_changed_notification=(val); end

  # source://devise/4.9.4/lib/devise.rb#166
  def send_password_change_notification; end

  # source://devise/4.9.4/lib/devise.rb#166
  def send_password_change_notification=(val); end

  # source://devise/4.9.4/lib/devise.rb#308
  def sign_in_after_change_password; end

  # source://devise/4.9.4/lib/devise.rb#308
  def sign_in_after_change_password=(val); end

  # source://devise/4.9.4/lib/devise.rb#205
  def sign_in_after_reset_password; end

  # source://devise/4.9.4/lib/devise.rb#205
  def sign_in_after_reset_password=(val); end

  # source://devise/4.9.4/lib/devise.rb#234
  def sign_out_all_scopes; end

  # source://devise/4.9.4/lib/devise.rb#234
  def sign_out_all_scopes=(val); end

  # source://devise/4.9.4/lib/devise.rb#238
  def sign_out_via; end

  # source://devise/4.9.4/lib/devise.rb#238
  def sign_out_via=(val); end

  # source://devise/4.9.4/lib/devise.rb#217
  def skip_session_storage; end

  # source://devise/4.9.4/lib/devise.rb#217
  def skip_session_storage=(val); end

  # source://devise/4.9.4/lib/devise.rb#75
  def stretches; end

  # source://devise/4.9.4/lib/devise.rb#75
  def stretches=(val); end

  # source://devise/4.9.4/lib/devise.rb#95
  def strip_whitespace_keys; end

  # source://devise/4.9.4/lib/devise.rb#95
  def strip_whitespace_keys=(val); end

  # source://devise/4.9.4/lib/devise.rb#154
  def timeout_in; end

  # source://devise/4.9.4/lib/devise.rb#154
  def timeout_in=(val); end

  # source://devise/4.9.4/lib/devise.rb#304
  def token_generator; end

  # source://devise/4.9.4/lib/devise.rb#304
  def token_generator=(val); end

  # source://devise/4.9.4/lib/devise.rb#193
  def unlock_in; end

  # source://devise/4.9.4/lib/devise.rb#193
  def unlock_in=(val); end

  # source://devise/4.9.4/lib/devise.rb#180
  def unlock_keys; end

  # source://devise/4.9.4/lib/devise.rb#180
  def unlock_keys=(val); end

  # source://devise/4.9.4/lib/devise.rb#185
  def unlock_strategy; end

  # source://devise/4.9.4/lib/devise.rb#185
  def unlock_strategy=(val); end

  # source://devise/4.9.4/lib/devise.rb#291
  def warden_config; end

  # source://devise/4.9.4/lib/devise.rb#291
  def warden_config=(val); end

  class << self
    # source://devise/4.9.4/lib/devise.rb#528
    def activerecord51?; end

    # source://devise/4.9.4/lib/devise.rb#360
    def add_mapping(resource, options); end

    # source://devise/4.9.4/lib/devise.rb#393
    def add_module(module_name, options = T.unsafe(nil)); end

    # source://devise/4.9.4/lib/devise.rb#138
    def allow_unconfirmed_access_for; end

    # source://devise/4.9.4/lib/devise.rb#138
    def allow_unconfirmed_access_for=(val); end

    # source://devise/4.9.4/lib/devise.rb#83
    def authentication_keys; end

    # source://devise/4.9.4/lib/devise.rb#83
    def authentication_keys=(val); end

    # source://devise/4.9.4/lib/devise.rb#340
    def available_router_name; end

    # source://devise/4.9.4/lib/devise.rb#91
    def case_insensitive_keys; end

    # source://devise/4.9.4/lib/devise.rb#91
    def case_insensitive_keys=(val); end

    # source://devise/4.9.4/lib/devise.rb#265
    def clean_up_csrf_token_on_authentication; end

    # source://devise/4.9.4/lib/devise.rb#265
    def clean_up_csrf_token_on_authentication=(val); end

    # source://devise/4.9.4/lib/devise.rb#482
    def configure_warden!; end

    # source://devise/4.9.4/lib/devise.rb#142
    def confirm_within; end

    # source://devise/4.9.4/lib/devise.rb#142
    def confirm_within=(val); end

    # source://devise/4.9.4/lib/devise.rb#146
    def confirmation_keys; end

    # source://devise/4.9.4/lib/devise.rb#146
    def confirmation_keys=(val); end

    # source://devise/4.9.4/lib/devise.rb#209
    def default_scope; end

    # source://devise/4.9.4/lib/devise.rb#209
    def default_scope=(val); end

    # source://devise/4.9.4/lib/devise.rb#524
    def deprecator; end

    # source://devise/4.9.4/lib/devise.rb#117
    def email_regexp; end

    # source://devise/4.9.4/lib/devise.rb#117
    def email_regexp=(val); end

    # source://devise/4.9.4/lib/devise.rb#133
    def expire_all_remember_me_on_sign_out; end

    # source://devise/4.9.4/lib/devise.rb#133
    def expire_all_remember_me_on_sign_out=(val); end

    # source://devise/4.9.4/lib/devise.rb#129
    def extend_remember_period; end

    # source://devise/4.9.4/lib/devise.rb#129
    def extend_remember_period=(val); end

    # source://devise/4.9.4/lib/devise.rb#507
    def friendly_token(length = T.unsafe(nil)); end

    # source://devise/4.9.4/lib/devise.rb#286
    def helpers; end

    # source://devise/4.9.4/lib/devise.rb#99
    def http_authenticatable; end

    # source://devise/4.9.4/lib/devise.rb#99
    def http_authenticatable=(val); end

    # source://devise/4.9.4/lib/devise.rb#103
    def http_authenticatable_on_xhr; end

    # source://devise/4.9.4/lib/devise.rb#103
    def http_authenticatable_on_xhr=(val); end

    # source://devise/4.9.4/lib/devise.rb#79
    def http_authentication_key; end

    # source://devise/4.9.4/lib/devise.rb#79
    def http_authentication_key=(val); end

    # source://devise/4.9.4/lib/devise.rb#111
    def http_authentication_realm; end

    # source://devise/4.9.4/lib/devise.rb#111
    def http_authentication_realm=(val); end

    # source://devise/4.9.4/lib/devise.rb#463
    def include_helpers(scope); end

    # source://devise/4.9.4/lib/devise.rb#300
    def last_attempt_warning; end

    # source://devise/4.9.4/lib/devise.rb#300
    def last_attempt_warning=(val); end

    # source://devise/4.9.4/lib/devise.rb#176
    def lock_strategy; end

    # source://devise/4.9.4/lib/devise.rb#176
    def lock_strategy=(val); end

    # source://devise/4.9.4/lib/devise.rb#349
    def mailer; end

    # source://devise/4.9.4/lib/devise.rb#354
    def mailer=(class_name); end

    # source://devise/4.9.4/lib/devise.rb#213
    def mailer_sender; end

    # source://devise/4.9.4/lib/devise.rb#213
    def mailer_sender=(val); end

    # source://devise/4.9.4/lib/devise.rb#278
    def mappings; end

    # source://devise/4.9.4/lib/devise.rb#189
    def maximum_attempts; end

    # source://devise/4.9.4/lib/devise.rb#189
    def maximum_attempts=(val); end

    # source://devise/4.9.4/lib/devise.rb#221
    def navigational_formats; end

    # source://devise/4.9.4/lib/devise.rb#221
    def navigational_formats=(val); end

    # source://devise/4.9.4/lib/devise.rb#457
    def omniauth(provider, *args); end

    # source://devise/4.9.4/lib/devise.rb#282
    def omniauth_configs; end

    # source://devise/4.9.4/lib/devise.rb#261
    def omniauth_path_prefix; end

    # source://devise/4.9.4/lib/devise.rb#261
    def omniauth_path_prefix=(val); end

    # source://devise/4.9.4/lib/devise.rb#344
    def omniauth_providers; end

    # source://devise/4.9.4/lib/devise.rb#107
    def params_authenticatable; end

    # source://devise/4.9.4/lib/devise.rb#107
    def params_authenticatable=(val); end

    # source://devise/4.9.4/lib/devise.rb#296
    def paranoid; end

    # source://devise/4.9.4/lib/devise.rb#296
    def paranoid=(val); end

    # source://devise/4.9.4/lib/devise.rb#244
    def parent_controller; end

    # source://devise/4.9.4/lib/devise.rb#244
    def parent_controller=(val); end

    # source://devise/4.9.4/lib/devise.rb#250
    def parent_mailer; end

    # source://devise/4.9.4/lib/devise.rb#250
    def parent_mailer=(val); end

    # source://devise/4.9.4/lib/devise.rb#121
    def password_length; end

    # source://devise/4.9.4/lib/devise.rb#121
    def password_length=(val); end

    # source://devise/4.9.4/lib/devise.rb#158
    def pepper; end

    # source://devise/4.9.4/lib/devise.rb#158
    def pepper=(val); end

    # source://devise/4.9.4/lib/devise.rb#150
    def reconfirmable; end

    # source://devise/4.9.4/lib/devise.rb#150
    def reconfirmable=(val); end

    # source://devise/4.9.4/lib/devise.rb#332
    def ref(arg); end

    # source://devise/4.9.4/lib/devise.rb#475
    def regenerate_helpers!; end

    # source://devise/4.9.4/lib/devise.rb#272
    def reload_routes; end

    # source://devise/4.9.4/lib/devise.rb#272
    def reload_routes=(val); end

    # source://devise/4.9.4/lib/devise.rb#125
    def remember_for; end

    # source://devise/4.9.4/lib/devise.rb#125
    def remember_for=(val); end

    # source://devise/4.9.4/lib/devise.rb#71
    def rememberable_options; end

    # source://devise/4.9.4/lib/devise.rb#71
    def rememberable_options=(val); end

    # source://devise/4.9.4/lib/devise.rb#87
    def request_keys; end

    # source://devise/4.9.4/lib/devise.rb#87
    def request_keys=(val); end

    # source://devise/4.9.4/lib/devise.rb#197
    def reset_password_keys; end

    # source://devise/4.9.4/lib/devise.rb#197
    def reset_password_keys=(val); end

    # source://devise/4.9.4/lib/devise.rb#201
    def reset_password_within; end

    # source://devise/4.9.4/lib/devise.rb#201
    def reset_password_within=(val); end

    # source://devise/4.9.4/lib/devise.rb#230
    def responder; end

    # source://devise/4.9.4/lib/devise.rb#230
    def responder=(val); end

    # source://devise/4.9.4/lib/devise.rb#256
    def router_name; end

    # source://devise/4.9.4/lib/devise.rb#256
    def router_name=(val); end

    # source://devise/4.9.4/lib/devise.rb#171
    def scoped_views; end

    # source://devise/4.9.4/lib/devise.rb#171
    def scoped_views=(val); end

    # source://devise/4.9.4/lib/devise.rb#67
    def secret_key; end

    # source://devise/4.9.4/lib/devise.rb#67
    def secret_key=(val); end

    # source://devise/4.9.4/lib/devise.rb#515
    def secure_compare(a, b); end

    # source://devise/4.9.4/lib/devise.rb#162
    def send_email_changed_notification; end

    # source://devise/4.9.4/lib/devise.rb#162
    def send_email_changed_notification=(val); end

    # source://devise/4.9.4/lib/devise.rb#166
    def send_password_change_notification; end

    # source://devise/4.9.4/lib/devise.rb#166
    def send_password_change_notification=(val); end

    # source://devise/4.9.4/lib/devise.rb#313
    def setup; end

    # source://devise/4.9.4/lib/devise.rb#308
    def sign_in_after_change_password; end

    # source://devise/4.9.4/lib/devise.rb#308
    def sign_in_after_change_password=(val); end

    # source://devise/4.9.4/lib/devise.rb#205
    def sign_in_after_reset_password; end

    # source://devise/4.9.4/lib/devise.rb#205
    def sign_in_after_reset_password=(val); end

    # source://devise/4.9.4/lib/devise.rb#234
    def sign_out_all_scopes; end

    # source://devise/4.9.4/lib/devise.rb#234
    def sign_out_all_scopes=(val); end

    # source://devise/4.9.4/lib/devise.rb#238
    def sign_out_via; end

    # source://devise/4.9.4/lib/devise.rb#238
    def sign_out_via=(val); end

    # source://devise/4.9.4/lib/devise.rb#217
    def skip_session_storage; end

    # source://devise/4.9.4/lib/devise.rb#217
    def skip_session_storage=(val); end

    # source://devise/4.9.4/lib/devise.rb#75
    def stretches; end

    # source://devise/4.9.4/lib/devise.rb#75
    def stretches=(val); end

    # source://devise/4.9.4/lib/devise.rb#95
    def strip_whitespace_keys; end

    # source://devise/4.9.4/lib/devise.rb#95
    def strip_whitespace_keys=(val); end

    # source://devise/4.9.4/lib/devise.rb#154
    def timeout_in; end

    # source://devise/4.9.4/lib/devise.rb#154
    def timeout_in=(val); end

    # source://devise/4.9.4/lib/devise.rb#304
    def token_generator; end

    # source://devise/4.9.4/lib/devise.rb#304
    def token_generator=(val); end

    # source://devise/4.9.4/lib/devise.rb#193
    def unlock_in; end

    # source://devise/4.9.4/lib/devise.rb#193
    def unlock_in=(val); end

    # source://devise/4.9.4/lib/devise.rb#180
    def unlock_keys; end

    # source://devise/4.9.4/lib/devise.rb#180
    def unlock_keys=(val); end

    # source://devise/4.9.4/lib/devise.rb#185
    def unlock_strategy; end

    # source://devise/4.9.4/lib/devise.rb#185
    def unlock_strategy=(val); end

    # source://devise/4.9.4/lib/devise.rb#449
    def warden(&block); end

    # source://devise/4.9.4/lib/devise.rb#291
    def warden_config; end

    # source://devise/4.9.4/lib/devise.rb#291
    def warden_config=(val); end
  end
end

# source://devise-passkeys//lib/devise/passkeys/model.rb#4
module Devise::Models
  # source://devise/4.9.4/lib/devise/models.rb#79
  def devise(*modules); end

  # source://devise/4.9.4/lib/devise/models.rb#116
  def devise_modules_hook!; end

  class << self
    # source://devise/4.9.4/lib/devise/models.rb#54
    def check_fields!(klass); end

    # source://devise/4.9.4/lib/devise/models.rb#31
    def config(mod, *accessors); end
  end
end

# This is the actual module that gets included in your
# model when you include `:passkey_authenticatable` in the
# `devise` call (eg: `devise :passkey_authenticatable, ...`).
#
# source://devise-passkeys//lib/devise/passkeys/model.rb#8
module Devise::Models::PasskeyAuthenticatable
  # This is a callback that is called right after a successful passkey authentication.
  #
  # By default, it is a no-op, but you can override it in your model for any custom behavior
  # (such as notifying the user of a new login).
  #
  # @param passkey [String] the passkey that was used for authentication
  #
  # source://devise-passkeys//lib/devise/passkeys/model.rb#14
  def after_passkey_authentication(passkey:); end
end

# This module provides a devise extension to use passkeys instead
# of passwords for user authentication.
#
# It is lightweight and non-configurable. It does what it has to do and
# leaves some manual implementation to you.
#
# Please consult the {file:README.md#label-Usage} for installation & configuration instructions;
# and the links below for additional reading about:
#
# - What passkeys are
# - The underlying gems used to build this devise extension
# - Platform support & user interface implementation guides
#
# @see https://webauthn.guide
# @see https://passkeys.dev
# @see https://fidoalliance.org/passkeys
# @see https://github.com/cedarcode/webauthn-ruby
# @see https://github.com/ruby-passkeys/warden-webauthn
#
# source://devise-passkeys//lib/devise/passkeys/rails.rb#3
module Devise::Passkeys
  class << self
    # This is a helper method that creates and returns a passkey for
    # the given user (`resource`), using the provided label & `WebAuthn::Credential`
    #
    # @return A saved passkey for the the given user (`resource`)
    # @see PasskeyIssuer#create_and_return_passkey
    #
    # source://devise-passkeys//lib/devise/passkeys.rb#37
    def create_and_return_passkey(resource:, label:, webauthn_credential:, extra_attributes: T.unsafe(nil)); end
  end
end

# This module contains all the controller-level logic for:
#
# - User (resource) registration management (signup/delete account) using passkeys
# - User (resource) management of their passkeys
# - User (resource) authentication & reauthenticating using their passkeys
#
# Rather than having base classes, `Devise::Passkeys::Controllers` has a series of concerns
# that can be mixed into your app's controllers. This allows you to change behavior,
# and does not keep you stuck down a path that could be incompatible with your
# existing authentication setup.
#
# *Note:* The `Devise::Passkeys::Controllers::Concerns` namespace is for:
# > Code, related to the concerns for controllers, that can be extracted into a standalone
# > module that can be included & extended as needed for apps that need
# > to do something custom with their setup.
# >
# > https://github.com/ruby-passkeys/devise-passkeys/issues/4#issuecomment-1590357907
#
# @example
#   class Users::RegistrationsController < Devise::RegistrationsController
#   include Devise::Passkeys::Controllers::RegistrationsControllerConcern
#   end
#
#   class Users::SessionsController < Devise::SessionsController
#   include Devise::Passkeys::Controllers::SessionsControllerConcern
#   # ... any custom code you need
#
#   def relying_party
#   WebAuthn::RelyingParty.new(...)
#   end
#   end
#
#   # frozen_string_literal: true
#
#   class Users::ReauthenticationController < DeviseController
#   include Devise::Passkeys::Controllers::ReauthenticationControllerConcern
#   # ... any custom code you need
#
#   def relying_party
#   WebAuthn::RelyingParty.new(...)
#   end
#   end
#
#   # frozen_string_literal: true
#
#   class Users::PasskeysController < DeviseController
#   include Devise::Passkeys::Controllers::PasskeysControllerConcern
#   # ... any custom code you need
#
#   def relying_party
#   WebAuthn::RelyingParty.new(...)
#   end
#   end
#
# source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#5
module Devise::Passkeys::Controllers; end

# source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#6
module Devise::Passkeys::Controllers::Concerns; end

# This concern is responsible for storing, retrieving, clearing, consuming,
# and validating the reauthentication token in the session.
#
# A reauthentication token is a one-time random value that is used to
# indicate that the user has successfully been reauthenticated. This can be
# used for scenarios such as:
#
# - Adding a new passkey
# - Deleting a passkey
# - Performing sensitive actions inside your application
#
# You can customize which reauthentication token you're using by changing
# the `passkey_reauthentication_token_key` method after including this concern
#
# @see Devise::Passkeys::Controllers::ReauthenticationControllerConcern
#
# source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#22
module Devise::Passkeys::Controllers::Concerns::Reauthentication
  extend ::ActiveSupport::Concern

  # This method is responsible for clearing the reauthentication token from
  # the session.
  #
  # @return [String] The reauthentication token
  # @see passkey_reauthentication_token_key
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#51
  def clear_reauthentication_token!; end

  # This method is responsible for consuming (i.e. retrieving & clearing)
  # the reauthentication token from the session.
  #
  # @return [String] The reauthentication token
  # @see stored_reauthentication_token
  # @see clear_reauthentication_token!
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#61
  def consume_reauthentication_token!; end

  # This method is responsible for generating the key that will be used
  # to store the reauthentication token in the session hash.
  #
  # @return [String] The key that will be used to access the reauthentication token in the session
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#86
  def passkey_reauthentication_token_key; end

  # This method is responsible for storing the reauthentication token
  # in the session.
  #
  # The reauthentication token is securely generated using `Devise.friendly_token`
  #
  # @return [String] The reauthentication token
  # @see passkey_reauthentication_token_key
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#32
  def store_reauthentication_token_in_session; end

  # This method is responsible for retrieving the reauthentication token
  # from the session.
  #
  # @return [String] The reauthentication token
  # @see passkey_reauthentication_token_key
  # @see store_reauthentication_token_in_session
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#42
  def stored_reauthentication_token; end

  # This method is responsible for validating the given reauthentication token
  # against the one currently in the session.
  #
  # **Note**: Whenever a reauthentication token is checked using `valid_reauthentication_token?`,
  # It will be consumed. This means that a new token will need to be generated & stored
  # (by reauthenticating the user) if there were any issues.
  #
  # @param given_reauthentication_token [String] token to compare store token against
  # @return [Boolean] whether the `given_reauthentication_token` is the same as the
  #   `stored_reauthentication_token`
  # @see consume_reauthentication_token!
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication.rb#78
  def valid_reauthentication_token?(given_reauthentication_token:); end
end

# This concern is responsible for storing the reauthentication challenge in the session.
#
# A reauthentication challenge is a WebAuthn challenge exchange (i.e. authentication)
# to verify the user's identity and confirm they're able to perform a sensitive action
# by performing the entire authentication process.
#
# This can be used for scenarios such as:
#
# - Adding a new passkey
# - Deleting a passkey
# - Performing sensitive actions inside your application
#
# You can customize which reauthentication challenge you're using by changing
# the `passkey_reauthentication_challenge_session_key` method after including this concern
#
# @see Devise::Passkeys::Controllers::ReauthenticationControllerConcern
#
# source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication_challenge.rb#23
module Devise::Passkeys::Controllers::Concerns::ReauthenticationChallenge
  extend ::ActiveSupport::Concern

  # This method is responsible for generating the key that will be used to store the
  # reauthentication challenge in the session hash.
  #
  # @return [String] The reauthentication challenge session key
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication_challenge.rb#30
  def passkey_reauthentication_challenge_session_key; end

  # This method is responsible for storing the reauthentication challenge in the session.
  #
  # @param options_for_authentication [WebAuthn::PublicKeyCredential::RequestOptions] the options for authentication,
  #   generated by `webauthn-ruby`
  # @return [String] The reauthentication challenge
  # @see Devise::Passkeys::Controllers::ReauthenticationControllerConcern#new_challenge
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/concerns/reauthentication_challenge.rb#40
  def store_reauthentication_challenge_in_session(options_for_authentication:); end
end

# source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#6
module Devise::Passkeys::Controllers::PasskeysControllerConcern
  extend ::ActiveSupport::Concern
  include ::Devise::Passkeys::Controllers::Concerns::Reauthentication
  include ::Devise::Passkeys::Controllers::Concerns::ReauthenticationChallenge
  include ::Warden::WebAuthn::AuthenticationInitiationHelpers
  include ::Warden::WebAuthn::RegistrationHelpers

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#54
  def create; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#69
  def destroy; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#42
  def new_create_challenge; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#58
  def new_destroy_challenge; end

  protected

  # @yield [[resource, passkey]]
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#76
  def create_passkey(resource:); end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#113
  def ensure_at_least_one_passkey; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#88
  def exclude_external_ids_for_registration; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#119
  def find_passkey; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#109
  def passkey_params; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#133
  def reauthentication_params; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#137
  def render_credential_missing_or_could_not_be_parsed_error; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#92
  def user_details_for_registration; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#96
  def verify_credential_integrity; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#102
  def verify_passkey_challenge; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/passkeys_controller_concern.rb#127
  def verify_reauthentication_token; end
end

# This concern is responsible for handling reauthentication.
# It should be included in any controller that handles reauthentication, and defines:
#
# - Useful methods to assist with the reauthentication process
# - Concerns that are required to complete the reauthentication process
# - Helper modules from `Warden::WebAuthn` that are required to complete the reauthentication process
#
# **Note**: the implementing controller **must** define a `relying_party` method in order for
# reauthentications to work.
#
# The `authenticate_scope!` is called as a `before_action` to verify the authentication and set the
# `resource` for the controller.
#
# Likewise, `Warden::WebAuthn::RackHelpers#set_relying_party_in_request_env` is a `before_action` to ensure that the relying party is set in the
# `request.env` before the Warden strategy is executed
#
# @example
#   class ReauthenticationController < ApplicationController
#   include Devise::Passkeys::Controllers::ReauthenticationControllerConcern
#
#   def relying_party
#   WebAuthn::RelyingParty.new
#   end
#   end
# @see relying_party
# @see Devise::Passkeys::Controllers::Concerns::ReauthenticationChallenge
# @see Devise::Passkeys::Controllers::Concerns::Reauthentication
# @see Warden::WebAuthn::StrategyHelpers
# @see Warden::WebAuthn::RackHelpers
#
# source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#36
module Devise::Passkeys::Controllers::ReauthenticationControllerConcern
  extend ::ActiveSupport::Concern
  include ::Devise::Passkeys::Controllers::Concerns::Reauthentication
  include ::Devise::Passkeys::Controllers::Concerns::ReauthenticationChallenge
  include ::Warden::WebAuthn::AuthenticationInitiationHelpers
  include ::Warden::WebAuthn::RackHelpers

  # A controller action that stores the reauthentication challenge in session
  # and renders the options for authentication from `webauthn-ruby`.
  #
  # The response is rendered as JSON, with a status of `200 OK`.
  #
  # @see Devise::Passkeys::Controllers::Concerns::ReauthenticationChallenge#store_reauthentication_challenge_in_session
  # @see Warden::WebAuthn::AuthenticationInitiationHelpers#generate_authentication_options
  # @see Warden::WebAuthn::RackHelpers#set_relying_party_in_request_env
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#68
  def new_challenge; end

  # A controller action that:
  #
  # 1. Uses the `warden` strategy to authenticate the current user with the defined strategy
  # 2. Calls `sign_in` with `event: :passkey_reauthentication` to verify that the user can authenticate
  # 3. Stores the reauthentication token in the session
  # 4. Renders a JSON object with the reauthentication token
  # 5. Ensures that the reauthentication challenge from the session, regardless of any errors
  #
  # `prepare_params` is called as a `before_action` to prepare the passkey credential for use by the
  # Warden strategy.
  #
  # Optionally accepts a block that will be executed after the user has been reauthenticated.
  #
  # @example
  #   {"reauthentication_token": "abcd1234"}
  # @see strategy
  # @see Devise::Passkeys::Controllers::Concerns::Reauthentication#store_reauthentication_token_in_session
  # @see prepare_params
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#95
  def reauthenticate; end

  protected

  # source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#126
  def auth_options; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#130
  def delete_reauthentication_challenge; end

  # Prepares the request parameters for use by the Warden strategy
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#112
  def prepare_params; end

  # The method that returns the `WebAuthn::RelyingParty` for this request.
  #
  # @abstract
  # @raise [NoMethodError]
  # @return [WebAuthn::RelyingParty] when overridden, this method should return a `WebAuthn::RelyingParty` instance
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#138
  def relying_party; end

  # A method that can be overridden to customize the Warden stratey used.
  #
  # @return [Symbol] The key that identifies which `Warden` strategy will be used to handle the
  #   authentication flow for the reauthentication. Defaults to `:passkey_reauthentication`
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/reauthentication_controller_concern.rb#122
  def strategy; end
end

# This concern should be included in any controller that handles
# user (`resource`) registration management (ie: signup/deleting an account),
# and defines:
#
# - Useful methods and before filters to streamline user (`resource`) registration management using session variables
# - Controller actions for:
#     - Issuing a new WebAuthn challenge
#     - A `create` action that creates a passkey if the user (`resource`) has been persisted
# - Helper modules from `Warden::WebAuthn` that are required to complete the registration process
#
# The `registration_user_id_key` and `registration_challenge_key` are defined
# using the `resource_name`, to keep the generated IDs unique between resources
# during the registration process.
#
# A `raw_credential` method is provided to streamline access to
# `passkey_params[:passkey_credential]`.
#
# **Note**: the implementing controller **must** define a `relying_party` method in order for
# registrations to work.
#
# @example
#   class RegistrationsController < ApplicationController
#   include Devise::Passkeys::Controllers::RegistrationsControllerConcern
#
#   def relying_party
#   WebAuthn::RelyingParty.new
#   end
#   end
# @see Devise::Passkeys::Controllers::Concerns::Reauthentication
# @see Warden::WebAuthn::RegistrationHelpers
#
# source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#38
module Devise::Passkeys::Controllers::RegistrationsControllerConcern
  extend ::ActiveSupport::Concern
  include ::Devise::Passkeys::Controllers::Concerns::Reauthentication
  include ::Warden::WebAuthn::RegistrationHelpers

  # This controller action creates a new user (`resource`), using the given
  # email & passkey. It:
  #
  # 1. calls the parent class's `#create` method
  # 2. calls `#create_passkey_for_resource` to finish creating the passkey
  #    if the user (`resource`) was actually persisted
  # 3. Finishes the rest of the parent class's `#create` method
  #
  #
  # The following before actions are called:
  #
  # - `require_email_and_passkey_label`
  # - `verify_passkey_registration_challenge`
  # - `configure_sign_up_params`
  #
  # @see require_email_and_passkey_label
  # @see verify_passkey_registration_challenge
  # @see configure_sign_up_params
  # @see create_passkey_for_resource
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#110
  def create; end

  # This controller action issues a new challenge for the registration handshake.
  #
  # The challenge is stored in a session variable, and renders the WebAuthn
  # registration options as a JSON response.
  #
  # The following before filters are called:
  #
  # - `require_no_authentication`
  # - `require_email_and_passkey_label`
  #
  # @see DeviseController#require_no_authentication
  # @see require_email_and_passkey_label
  # @see Warden::WebAuthn#generate_registration_options
  # @see https://github.com/cedarcode/webauthn-ruby#initiation-phase
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#79
  def new_challenge; end

  protected

  # Adds the generated WebAuthn User ID to `devise_parameter_sanitizer`'s permitted keys
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#252
  def configure_sign_up_params; end

  # Generates a passkey for the given `resource`, using the `resource.passkeys.create!`
  # method with the following attributes:
  #
  # - `label`: The `passkey_params[:passkey_label]`
  # - `public_key`: The `@webauthn_credential.public_key`
  # - `external_id`: The credential ID, strictly encoded as a Base 64 string
  # - `sign_count`: The `@webauthn_credential.sign_count`
  # - `last_used_at`: The current time, since this is the first time the passkey is being used
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#152
  def create_passkey(resource:); end

  # Creates a passkey for given user (`resource`).
  #
  # The method tests that the user (`resource`) is in the database
  # before saving the passkey for the given user (`resource`).
  #
  #
  # This method also ensures that the generated WebAuthn User ID is deleted from the session to prevent
  # data leaks.
  #
  # @see create_passkey
  # @yield [resource, passkey] The provided `resource` and the newly created passkey.
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#132
  def create_passkey_for_resource(resource:); end

  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#270
  def delete_registration_user_id!; end

  # Override this method if you need to exclude certain WebAuthn credentials
  # from a registration request.
  #
  # @see new_challenge
  # @see https://github.com/cedarcode/webauthn-ruby#initiation-phase
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#200
  def exclude_external_ids_for_registration; end

  # The subset of parameters used when verifying the passkey
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#206
  def passkey_params; end

  # The subset of parameters used when verifying a reauthentication_token
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#183
  def reauthentication_params; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#266
  def registration_user_id; end

  # Verifies that the `sign_up_params` has an `:email` and `:passkey_label`.
  #
  # If either is missing or blank, a `400 Bad Request` JSON response is rendered.
  #
  # @example
  #   {"error": "Please enter your email address."}
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#217
  def require_email_and_passkey_label; end

  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#274
  def store_registration_user_id; end

  # An override of `DeviseController`'s implementation, to circumvent the
  # `update_with_password` method
  #
  # @see DeviseController#update_resource
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#191
  def update_resource(resource, params); end

  # Prepares the user details for a WebAuthn registration request
  #
  # @see new_challenge
  # @see https://github.com/cedarcode/webauthn-ruby#initiation-phase
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#261
  def user_details_for_registration; end

  # Verifies the registration challenge is correct.
  #
  # If the challenge failed, a `400 Bad Request` JSON
  # response is rendered.
  #
  # @example
  #   {"error": "Please try a different passkey."}
  # @see Warden::WebAuthn::RegistrationHelpers#verify_registration
  # @see https://github.com/cedarcode/webauthn-ruby#verification-phase
  # @see Warden::WebAuthn::ErrorKeyFinder#webauthn_error_key
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#243
  def verify_passkey_registration_challenge; end

  # Verifies that the given reauthentication token matches the
  # expected value stored in the session.
  #
  # If the reauthentication token is not valid,
  # a `400 Bad Request` JSON response is rendered.
  #
  # @example
  #   {"error": "Please reauthenticate to continue."}
  # @see reauthentication_params
  # @see Devise::Passkeys::Controllers::Concerns::Reauthentication#valid_reauthentication_token?
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/registrations_controller_concern.rb#175
  def verify_reauthentication_token; end
end

# source://devise-passkeys//lib/devise/passkeys/controllers/sessions_controller_concern.rb#6
module Devise::Passkeys::Controllers::SessionsControllerConcern
  extend ::ActiveSupport::Concern
  include ::Warden::WebAuthn::AuthenticationInitiationHelpers
  include ::Warden::WebAuthn::RackHelpers

  # source://devise-passkeys//lib/devise/passkeys/controllers/sessions_controller_concern.rb#22
  def new_challenge; end

  protected

  # @raise [NoMethodError]
  #
  # source://devise-passkeys//lib/devise/passkeys/controllers/sessions_controller_concern.rb#32
  def relying_party; end
end

# source://devise-passkeys//lib/devise/passkeys/rails.rb#4
class Devise::Passkeys::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#5
class Devise::Passkeys::PasskeyIssuer
  # source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#10
  def create_and_return_passkey(resource:, label:, webauthn_credential:, extra_attributes: T.unsafe(nil)); end

  private

  # source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#38
  def passkey_class(resource); end

  class << self
    # source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#6
    def build; end
  end
end

# source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#24
class Devise::Passkeys::PasskeyIssuer::CredentialFinder
  # @return [CredentialFinder] a new instance of CredentialFinder
  #
  # source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#27
  def initialize(resource_class:); end

  # source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#31
  def find_with_credential_id(encoded_credential_id); end

  # Returns the value of attribute resource_class.
  #
  # source://devise-passkeys//lib/devise/passkeys/passkey_issuer.rb#25
  def resource_class; end
end

# source://devise-passkeys//lib/devise/passkeys/version.rb#5
Devise::Passkeys::VERSION = T.let(T.unsafe(nil), String)

# source://devise-passkeys//lib/devise/passkeys/strategy.rb#7
module Devise::Strategies; end

# source://devise-passkeys//lib/devise/passkeys/strategy.rb#8
class Devise::Strategies::PasskeyAuthenticatable < ::Devise::Strategies::Authenticatable
  include ::Warden::WebAuthn::StrategyHelpers
  include ::Warden::WebAuthn::RackHelpers

  # source://devise-passkeys//lib/devise/passkeys/strategy.rb#24
  def authenticate!; end

  # source://devise-passkeys//lib/devise/passkeys/strategy.rb#53
  def authentication_challenge_key; end

  # source://devise-passkeys//lib/devise/passkeys/strategy.rb#45
  def credential_finder; end

  # source://devise-passkeys//lib/devise/passkeys/strategy.rb#49
  def raw_credential; end

  # source://devise-passkeys//lib/devise/passkeys/strategy.rb#57
  def record_passkey_use(passkey:); end

  # @return [Boolean]
  #
  # source://devise-passkeys//lib/devise/passkeys/strategy.rb#11
  def store?; end

  # @return [Boolean]
  #
  # source://devise-passkeys//lib/devise/passkeys/strategy.rb#15
  def valid?; end
end

# source://devise-passkeys//lib/devise/passkeys/reauthentication_strategy.rb#8
class Devise::Strategies::PasskeyReauthentication < ::Devise::Strategies::PasskeyAuthenticatable
  # source://devise-passkeys//lib/devise/passkeys/reauthentication_strategy.rb#9
  def authentication_challenge_key; end

  # Reauthentication runs through Authentication (user_set)
  # as part of its cycle, which would normally reset CSRF
  # data in the session
  #
  # @return [Boolean]
  #
  # source://devise-passkeys//lib/devise/passkeys/reauthentication_strategy.rb#16
  def clean_up_csrf?; end
end
