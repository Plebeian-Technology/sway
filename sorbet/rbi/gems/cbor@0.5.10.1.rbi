# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cbor` gem.
# Please instead update this file by running `bin/tapioca gem cbor`.


# source://cbor//lib/cbor/version.rb#1
module CBOR
  private

  # source://cbor//lib/cbor.rb#5
  def decode(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def dump(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def encode(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def load(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def pack(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def unpack(*_arg0); end

  class << self
    # source://cbor//lib/cbor.rb#5
    def decode(*_arg0); end

    # source://cbor//lib/cbor.rb#5
    def dump(*_arg0); end

    # source://cbor//lib/cbor.rb#5
    def encode(*_arg0); end

    # source://cbor//lib/cbor.rb#5
    def load(*_arg0); end

    # source://cbor//lib/cbor.rb#5
    def pack(*_arg0); end

    # source://cbor//lib/cbor.rb#5
    def unpack(*_arg0); end
  end
end

class CBOR::Buffer
  # source://cbor//lib/cbor.rb#5
  def initialize(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def <<(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def clear; end

  # source://cbor//lib/cbor.rb#5
  def close; end

  # source://cbor//lib/cbor.rb#5
  def empty?; end

  # source://cbor//lib/cbor.rb#5
  def flush; end

  # source://cbor//lib/cbor.rb#5
  def io; end

  # source://cbor//lib/cbor.rb#5
  def read(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def read_all(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def size; end

  # source://cbor//lib/cbor.rb#5
  def skip(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def skip_all(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def to_a; end

  # source://cbor//lib/cbor.rb#5
  def to_s; end

  # source://cbor//lib/cbor.rb#5
  def to_str; end

  # source://cbor//lib/cbor.rb#5
  def write(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def write_to(_arg0); end
end

class CBOR::MalformedFormatError < ::CBOR::UnpackError; end

class CBOR::Packer
  # source://cbor//lib/cbor.rb#5
  def initialize(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def buffer; end

  # source://cbor//lib/cbor.rb#5
  def clear; end

  # source://cbor//lib/cbor.rb#5
  def empty?; end

  # source://cbor//lib/cbor.rb#5
  def flush; end

  # source://cbor//lib/cbor.rb#5
  def pack(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def size; end

  # source://cbor//lib/cbor.rb#5
  def to_a; end

  # source://cbor//lib/cbor.rb#5
  def to_s; end

  # source://cbor//lib/cbor.rb#5
  def to_str; end

  # source://cbor//lib/cbor.rb#5
  def write(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def write_array_header(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def write_map_header(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def write_nil; end

  # source://cbor//lib/cbor.rb#5
  def write_to(_arg0); end
end

class CBOR::Simple < ::Struct
  # source://cbor//lib/cbor.rb#5
  def to_cbor(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def value; end

  # source://cbor//lib/cbor.rb#5
  def value=(_); end

  class << self
    # source://cbor//lib/cbor.rb#5
    def [](*_arg0); end

    # source://cbor//lib/cbor.rb#5
    def inspect; end

    # source://cbor//lib/cbor.rb#5
    def keyword_init?; end

    # source://cbor//lib/cbor.rb#5
    def members; end

    # source://cbor//lib/cbor.rb#5
    def new(*_arg0); end
  end
end

class CBOR::StackError < ::CBOR::UnpackError; end

class CBOR::Tagged < ::Struct
  # source://cbor//lib/cbor.rb#5
  def tag; end

  # source://cbor//lib/cbor.rb#5
  def tag=(_); end

  # source://cbor//lib/cbor.rb#5
  def to_cbor(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def value; end

  # source://cbor//lib/cbor.rb#5
  def value=(_); end

  class << self
    # source://cbor//lib/cbor.rb#5
    def [](*_arg0); end

    # source://cbor//lib/cbor.rb#5
    def inspect; end

    # source://cbor//lib/cbor.rb#5
    def keyword_init?; end

    # source://cbor//lib/cbor.rb#5
    def members; end

    # source://cbor//lib/cbor.rb#5
    def new(*_arg0); end
  end
end

class CBOR::TypeError < ::StandardError; end
class CBOR::UnpackError < ::StandardError; end

class CBOR::Unpacker
  # source://cbor//lib/cbor.rb#5
  def initialize(*_arg0); end

  # source://cbor//lib/cbor.rb#5
  def buffer; end

  # source://cbor//lib/cbor.rb#5
  def each; end

  # source://cbor//lib/cbor.rb#5
  def feed(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def feed_each(_arg0); end

  # source://cbor//lib/cbor.rb#5
  def read; end

  # source://cbor//lib/cbor.rb#5
  def read_array_header; end

  # source://cbor//lib/cbor.rb#5
  def read_map_header; end

  # source://cbor//lib/cbor.rb#5
  def reset; end

  # source://cbor//lib/cbor.rb#5
  def skip; end

  # source://cbor//lib/cbor.rb#5
  def skip_nil; end

  # source://cbor//lib/cbor.rb#5
  def unpack; end
end

# source://cbor//lib/cbor/version.rb#2
CBOR::VERSION = T.let(T.unsafe(nil), String)
