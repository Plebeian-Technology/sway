# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.

class ActiveSupport::TestCase
  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def addresses(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def bill_cosponsors(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def bill_score_districts(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def bill_scores(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def bill_sponsors(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def bills(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def districts(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def legislator_votes(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def legislators(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def passkeys(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def sway_locales(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def user_districts(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def user_invites(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def user_legislator_scores(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def user_legislators(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def user_votes(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def users(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def votes(*fixture_names); end
end
