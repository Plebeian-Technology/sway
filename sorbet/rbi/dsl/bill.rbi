# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Bill`.
# Please instead update this file by running `bin/tapioca dsl Bill`.


class Bill
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Bill).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Bill).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Bill]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Bill)) }
    def fifth; end

    sig { returns(::Bill) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Bill)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Bill])
    end
    sig { params(args: NilClass, block: T.proc.params(object: ::Bill).void).returns(T.nilable(::Bill)) }
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Bill)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Bill) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Bill).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Bill])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Bill]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Bill]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Bill)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Bill) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Bill) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Bill)) }
    sig { params(limit: Integer).returns(T::Array[::Bill]) }
    def first(limit = nil); end

    sig { returns(::Bill) }
    def first!; end

    sig { returns(T.nilable(::Bill)) }
    def forty_two; end

    sig { returns(::Bill) }
    def forty_two!; end

    sig { returns(T.nilable(::Bill)) }
    def fourth; end

    sig { returns(::Bill) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Bill)) }
    sig { params(limit: Integer).returns(T::Array[::Bill]) }
    def last(limit = nil); end

    sig { returns(::Bill) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Bill).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Bill).void)
      ).returns(T::Array[::Bill])
    end
    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Bill).void)).returns(::Bill) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Bill).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Bill).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Bill)) }
    def second; end

    sig { returns(::Bill) }
    def second!; end

    sig { returns(T.nilable(::Bill)) }
    def second_to_last; end

    sig { returns(::Bill) }
    def second_to_last!; end

    sig { returns(::Bill) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Bill).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Bill)) }
    sig { params(limit: Integer).returns(T::Array[::Bill]) }
    def take(limit = nil); end

    sig { returns(::Bill) }
    def take!; end

    sig { returns(T.nilable(::Bill)) }
    def third; end

    sig { returns(::Bill) }
    def third!; end

    sig { returns(T.nilable(::Bill)) }
    def third_to_last; end

    sig { returns(::Bill) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def bill_cosponsor_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def bill_cosponsor_ids=(ids); end

    # This method is created by ActiveRecord on the `Bill` class because it declared `has_many :bill_cosponsors`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BillCosponsor::PrivateCollectionProxy) }
    def bill_cosponsors; end

    sig { params(value: T::Enumerable[::BillCosponsor]).void }
    def bill_cosponsors=(value); end

    sig { returns(T.nilable(::BillNotification)) }
    def bill_notification; end

    sig { params(value: T.nilable(::BillNotification)).void }
    def bill_notification=(value); end

    sig { returns(T.nilable(::BillScore)) }
    def bill_score; end

    sig { params(value: T.nilable(::BillScore)).void }
    def bill_score=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillNotification) }
    def build_bill_notification(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillScore) }
    def build_bill_score(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Legislator) }
    def build_legislator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SwayLocale) }
    def build_sway_locale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillNotification) }
    def create_bill_notification(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillNotification) }
    def create_bill_notification!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillScore) }
    def create_bill_score(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BillScore) }
    def create_bill_score!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Legislator) }
    def create_legislator(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Legislator) }
    def create_legislator!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SwayLocale) }
    def create_sway_locale(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::SwayLocale) }
    def create_sway_locale!(*args, &blk); end

    sig { returns(T.nilable(::Legislator)) }
    def legislator; end

    sig { params(value: T.nilable(::Legislator)).void }
    def legislator=(value); end

    sig { returns(T::Boolean) }
    def legislator_changed?; end

    sig { returns(T::Boolean) }
    def legislator_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def legislator_vote_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def legislator_vote_ids=(ids); end

    # This method is created by ActiveRecord on the `Bill` class because it declared `has_many :legislator_votes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::LegislatorVote::PrivateCollectionProxy) }
    def legislator_votes; end

    sig { params(value: T::Enumerable[::LegislatorVote]).void }
    def legislator_votes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_bill_position_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_bill_position_ids=(ids); end

    # This method is created by ActiveRecord on the `Bill` class because it declared `has_many :organization_bill_positions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::OrganizationBillPosition::PrivateCollectionProxy) }
    def organization_bill_positions; end

    sig { params(value: T::Enumerable[::OrganizationBillPosition]).void }
    def organization_bill_positions=(value); end

    sig { returns(T.nilable(::BillNotification)) }
    def reload_bill_notification; end

    sig { returns(T.nilable(::BillScore)) }
    def reload_bill_score; end

    sig { returns(T.nilable(::Legislator)) }
    def reload_legislator; end

    sig { returns(T.nilable(::SwayLocale)) }
    def reload_sway_locale; end

    sig { void }
    def reset_bill_notification; end

    sig { void }
    def reset_bill_score; end

    sig { void }
    def reset_legislator; end

    sig { void }
    def reset_sway_locale; end

    sig { returns(T.nilable(::SwayLocale)) }
    def sway_locale; end

    sig { params(value: T.nilable(::SwayLocale)).void }
    def sway_locale=(value); end

    sig { returns(T::Boolean) }
    def sway_locale_changed?; end

    sig { returns(T::Boolean) }
    def sway_locale_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def vote_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def vote_ids=(ids); end

    # This method is created by ActiveRecord on the `Bill` class because it declared `has_many :votes`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Vote::PrivateCollectionProxy) }
    def votes; end

    sig { params(value: T::Enumerable[::Vote]).void }
    def votes=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig { params(blk: T.proc.params(record: ::Bill).returns(BasicObject)).returns(T::Array[::Bill]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(T::Boolean)) }
    def active; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def active_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def active_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::String)) }
    def audio_bucket_path; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def audio_bucket_path=(value); end

    sig { returns(T::Boolean) }
    def audio_bucket_path?; end

    sig { returns(T.nilable(::String)) }
    def audio_bucket_path_before_last_save; end

    sig { returns(T.untyped) }
    def audio_bucket_path_before_type_cast; end

    sig { returns(T::Boolean) }
    def audio_bucket_path_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def audio_bucket_path_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def audio_bucket_path_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def audio_bucket_path_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def audio_bucket_path_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def audio_bucket_path_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def audio_bucket_path_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def audio_bucket_path_previously_was; end

    sig { returns(T.nilable(::String)) }
    def audio_bucket_path_was; end

    sig { void }
    def audio_bucket_path_will_change!; end

    sig { returns(T.nilable(::String)) }
    def audio_by_line; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def audio_by_line=(value); end

    sig { returns(T::Boolean) }
    def audio_by_line?; end

    sig { returns(T.nilable(::String)) }
    def audio_by_line_before_last_save; end

    sig { returns(T.untyped) }
    def audio_by_line_before_type_cast; end

    sig { returns(T::Boolean) }
    def audio_by_line_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def audio_by_line_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def audio_by_line_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def audio_by_line_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def audio_by_line_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def audio_by_line_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def audio_by_line_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def audio_by_line_previously_was; end

    sig { returns(T.nilable(::String)) }
    def audio_by_line_was; end

    sig { void }
    def audio_by_line_will_change!; end

    sig { returns(::String) }
    def category; end

    sig { params(value: ::String).returns(::String) }
    def category=(value); end

    sig { returns(T::Boolean) }
    def category?; end

    sig { returns(T.nilable(::String)) }
    def category_before_last_save; end

    sig { returns(T.untyped) }
    def category_before_type_cast; end

    sig { returns(T::Boolean) }
    def category_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def category_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def category_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def category_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def category_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def category_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def category_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def category_previously_was; end

    sig { returns(T.nilable(::String)) }
    def category_was; end

    sig { void }
    def category_will_change!; end

    sig { returns(::String) }
    def chamber; end

    sig { params(value: ::String).returns(::String) }
    def chamber=(value); end

    sig { returns(T::Boolean) }
    def chamber?; end

    sig { returns(T.nilable(::String)) }
    def chamber_before_last_save; end

    sig { returns(T.untyped) }
    def chamber_before_type_cast; end

    sig { returns(T::Boolean) }
    def chamber_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def chamber_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def chamber_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def chamber_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def chamber_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def chamber_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def chamber_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def chamber_previously_was; end

    sig { returns(T.nilable(::String)) }
    def chamber_was; end

    sig { void }
    def chamber_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def external_id; end

    sig { params(value: ::String).returns(::String) }
    def external_id=(value); end

    sig { returns(T::Boolean) }
    def external_id?; end

    sig { returns(T.nilable(::String)) }
    def external_id_before_last_save; end

    sig { returns(T.untyped) }
    def external_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def external_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def external_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def external_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def external_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def external_id_was; end

    sig { void }
    def external_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def external_version; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def external_version=(value); end

    sig { returns(T::Boolean) }
    def external_version?; end

    sig { returns(T.nilable(::String)) }
    def external_version_before_last_save; end

    sig { returns(T.untyped) }
    def external_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def external_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def external_version_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def external_version_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def external_version_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_version_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def external_version_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def external_version_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def external_version_previously_was; end

    sig { returns(T.nilable(::String)) }
    def external_version_was; end

    sig { void }
    def external_version_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def house_vote_date_time_utc; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def house_vote_date_time_utc=(value); end

    sig { returns(T::Boolean) }
    def house_vote_date_time_utc?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def house_vote_date_time_utc_before_last_save; end

    sig { returns(T.untyped) }
    def house_vote_date_time_utc_before_type_cast; end

    sig { returns(T::Boolean) }
    def house_vote_date_time_utc_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def house_vote_date_time_utc_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def house_vote_date_time_utc_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def house_vote_date_time_utc_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def house_vote_date_time_utc_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def house_vote_date_time_utc_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def house_vote_date_time_utc_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def house_vote_date_time_utc_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def house_vote_date_time_utc_was; end

    sig { void }
    def house_vote_date_time_utc_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def introduced_date_time_utc; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def introduced_date_time_utc=(value); end

    sig { returns(T::Boolean) }
    def introduced_date_time_utc?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def introduced_date_time_utc_before_last_save; end

    sig { returns(T.untyped) }
    def introduced_date_time_utc_before_type_cast; end

    sig { returns(T::Boolean) }
    def introduced_date_time_utc_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def introduced_date_time_utc_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def introduced_date_time_utc_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def introduced_date_time_utc_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def introduced_date_time_utc_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def introduced_date_time_utc_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def introduced_date_time_utc_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def introduced_date_time_utc_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def introduced_date_time_utc_was; end

    sig { void }
    def introduced_date_time_utc_will_change!; end

    sig { returns(::Integer) }
    def legislator_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def legislator_id=(value); end

    sig { returns(T::Boolean) }
    def legislator_id?; end

    sig { returns(T.nilable(::Integer)) }
    def legislator_id_before_last_save; end

    sig { returns(T.untyped) }
    def legislator_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def legislator_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def legislator_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def legislator_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def legislator_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def legislator_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def legislator_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def legislator_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def legislator_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def legislator_id_was; end

    sig { void }
    def legislator_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def link; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def link=(value); end

    sig { returns(T::Boolean) }
    def link?; end

    sig { returns(T.nilable(::String)) }
    def link_before_last_save; end

    sig { returns(T.untyped) }
    def link_before_type_cast; end

    sig { returns(T::Boolean) }
    def link_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def link_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def link_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def link_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def link_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def link_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def link_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def link_previously_was; end

    sig { returns(T.nilable(::String)) }
    def link_was; end

    sig { void }
    def link_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_audio_bucket_path!; end

    sig { void }
    def restore_audio_by_line!; end

    sig { void }
    def restore_category!; end

    sig { void }
    def restore_chamber!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_external_id!; end

    sig { void }
    def restore_external_version!; end

    sig { void }
    def restore_house_vote_date_time_utc!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_introduced_date_time_utc!; end

    sig { void }
    def restore_legislator_id!; end

    sig { void }
    def restore_link!; end

    sig { void }
    def restore_scheduled_release_date_utc!; end

    sig { void }
    def restore_senate_vote_date_time_utc!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_summary!; end

    sig { void }
    def restore_sway_locale_id!; end

    sig { void }
    def restore_title!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_audio_bucket_path; end

    sig { returns(T::Boolean) }
    def saved_change_to_audio_bucket_path?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_audio_by_line; end

    sig { returns(T::Boolean) }
    def saved_change_to_audio_by_line?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_category; end

    sig { returns(T::Boolean) }
    def saved_change_to_category?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_chamber; end

    sig { returns(T::Boolean) }
    def saved_change_to_chamber?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_external_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_external_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_external_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_external_version?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_house_vote_date_time_utc; end

    sig { returns(T::Boolean) }
    def saved_change_to_house_vote_date_time_utc?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_introduced_date_time_utc; end

    sig { returns(T::Boolean) }
    def saved_change_to_introduced_date_time_utc?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_legislator_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_legislator_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_link; end

    sig { returns(T::Boolean) }
    def saved_change_to_link?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_scheduled_release_date_utc; end

    sig { returns(T::Boolean) }
    def saved_change_to_scheduled_release_date_utc?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_senate_vote_date_time_utc; end

    sig { returns(T::Boolean) }
    def saved_change_to_senate_vote_date_time_utc?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_summary; end

    sig { returns(T::Boolean) }
    def saved_change_to_summary?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sway_locale_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_sway_locale_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_title; end

    sig { returns(T::Boolean) }
    def saved_change_to_title?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::Date)) }
    def scheduled_release_date_utc; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def scheduled_release_date_utc=(value); end

    sig { returns(T::Boolean) }
    def scheduled_release_date_utc?; end

    sig { returns(T.nilable(::Date)) }
    def scheduled_release_date_utc_before_last_save; end

    sig { returns(T.untyped) }
    def scheduled_release_date_utc_before_type_cast; end

    sig { returns(T::Boolean) }
    def scheduled_release_date_utc_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def scheduled_release_date_utc_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def scheduled_release_date_utc_change_to_be_saved; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def scheduled_release_date_utc_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def scheduled_release_date_utc_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def scheduled_release_date_utc_previous_change; end

    sig { params(from: T.nilable(::Date), to: T.nilable(::Date)).returns(T::Boolean) }
    def scheduled_release_date_utc_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Date)) }
    def scheduled_release_date_utc_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def scheduled_release_date_utc_was; end

    sig { void }
    def scheduled_release_date_utc_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def senate_vote_date_time_utc; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def senate_vote_date_time_utc=(value); end

    sig { returns(T::Boolean) }
    def senate_vote_date_time_utc?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def senate_vote_date_time_utc_before_last_save; end

    sig { returns(T.untyped) }
    def senate_vote_date_time_utc_before_type_cast; end

    sig { returns(T::Boolean) }
    def senate_vote_date_time_utc_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def senate_vote_date_time_utc_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def senate_vote_date_time_utc_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def senate_vote_date_time_utc_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def senate_vote_date_time_utc_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def senate_vote_date_time_utc_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def senate_vote_date_time_utc_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def senate_vote_date_time_utc_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def senate_vote_date_time_utc_was; end

    sig { void }
    def senate_vote_date_time_utc_will_change!; end

    sig { returns(T.nilable(::String)) }
    def status; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(T.nilable(::String)) }
    def summary; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def summary=(value); end

    sig { returns(T::Boolean) }
    def summary?; end

    sig { returns(T.nilable(::String)) }
    def summary_before_last_save; end

    sig { returns(T.untyped) }
    def summary_before_type_cast; end

    sig { returns(T::Boolean) }
    def summary_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def summary_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def summary_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def summary_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def summary_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def summary_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def summary_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def summary_previously_was; end

    sig { returns(T.nilable(::String)) }
    def summary_was; end

    sig { void }
    def summary_will_change!; end

    sig { returns(::Integer) }
    def sway_locale_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sway_locale_id=(value); end

    sig { returns(T::Boolean) }
    def sway_locale_id?; end

    sig { returns(T.nilable(::Integer)) }
    def sway_locale_id_before_last_save; end

    sig { returns(T.untyped) }
    def sway_locale_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def sway_locale_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sway_locale_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sway_locale_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sway_locale_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sway_locale_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sway_locale_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def sway_locale_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def sway_locale_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sway_locale_id_was; end

    sig { void }
    def sway_locale_id_will_change!; end

    sig { returns(::String) }
    def title; end

    sig { params(value: ::String).returns(::String) }
    def title=(value); end

    sig { returns(T::Boolean) }
    def title?; end

    sig { returns(T.nilable(::String)) }
    def title_before_last_save; end

    sig { returns(T.untyped) }
    def title_before_type_cast; end

    sig { returns(T::Boolean) }
    def title_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def title_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def title_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def title_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def title_previously_was; end

    sig { returns(T.nilable(::String)) }
    def title_was; end

    sig { void }
    def title_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_audio_bucket_path?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_audio_by_line?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_category?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_chamber?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_external_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_external_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_house_vote_date_time_utc?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_introduced_date_time_utc?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_legislator_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_link?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scheduled_release_date_utc?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_senate_vote_date_time_utc?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_summary?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sway_locale_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_title?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig { params(blk: T.proc.params(record: ::Bill).returns(BasicObject)).returns(T::Array[::Bill]) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Bill } }

    sig { returns(T::Array[::Bill]) }
    def to_a; end

    sig { returns(T::Array[::Bill]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Bill } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Bill } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Bill } }

    sig do
      params(
        records: T.any(::Bill, T::Enumerable[T.any(::Bill, T::Enumerable[::Bill])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Bill, T::Enumerable[T.any(::Bill, T::Enumerable[::Bill])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Bill, T::Enumerable[T.any(::Bill, T::Enumerable[::Bill])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Bill]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Bill, T::Enumerable[T.any(::Bill, T::Enumerable[::Bill])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Bill, T::Enumerable[T.any(::Bill, T::Enumerable[::Bill])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Bill, T::Enumerable[T.any(::Bill, T::Enumerable[::Bill])])
      ).returns(T::Array[::Bill])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Bill]) }
    def target; end

    sig { returns(T::Array[::Bill]) }
    def to_a; end

    sig { returns(T::Array[::Bill]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Bill } }

    sig { returns(T::Array[::Bill]) }
    def to_a; end

    sig { returns(T::Array[::Bill]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Bill } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Bill } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
